[{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Tidy FFT","text":"vignette discuss use tidy_fft function, , produces.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"the-function","dir":"Articles","previous_headings":"","what":"The Function","title":"Using Tidy FFT","text":"tidy_fft function parameters, six exact. sensible defaults made. important use function, supply full time-series data set, one missing data affect results.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"funcation-and-parameters","dir":"Articles","previous_headings":"The Function","what":"Funcation and Parameters","title":"Using Tidy FFT","text":"function full parameters follows: .data argument actual formatted data get passed function, time series data. .date_col argument column holds datetime interest. .value column column holds value analyzed function, can counts, averages, type value time series. .frequency argument details cyclical nature data, 12 monthly, 7 weekly, etc. .harmonics argument tell function many times fft run internally many filters made. Finally .upsampling argument tell function much function sample time parameter. Let us now work simple example.","code":"tidy_fft(   .data,   .date_col,   .value_col,   .frequency = 12L,   .harmonics = 1L,   .upsampling = 10L )"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"data","dir":"Articles","previous_headings":"Example","what":"Data","title":"Using Tidy FFT","text":"Lets get started data. Now sample data, let’s check .","code":"suppressPackageStartupMessages(library(dplyr)) #> Warning: package 'dplyr' was built under R version 4.2.3 suppressPackageStartupMessages(library(ggplot2)) #> Warning: package 'ggplot2' was built under R version 4.2.3 suppressPackageStartupMessages(library(timetk))  data_tbl <- AirPassengers %>%     ts_to_tbl() %>%     select(-index) glimpse(data_tbl) #> Rows: 144 #> Columns: 2 #> $ date_col <date> 1949-01-01, 1949-02-01, 1949-03-01, 1949-04-01, 1949-05-01, … #> $ value    <dbl> 112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 1…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"plot-data","dir":"Articles","previous_headings":"Example","what":"Plot Data","title":"Using Tidy FFT","text":"Lets take look time series plot data. Now know data looks like, lets go ahead run function assign variable called output","code":"suppressPackageStartupMessages(library(timetk))  data_tbl %>%   plot_time_series(     .date_var = date_col,     .value    = value   )"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"run-function","dir":"Articles","previous_headings":"Example","what":"Run Function","title":"Using Tidy FFT","text":"Now run function, let’s take look output.","code":"output <- tidy_fft(   .data = data_tbl,   .date_col = date_col,   .value_col = value,   .harmonics = 8,   .frequency = 12,   .upsampling = 5 )"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Using Tidy FFT","text":"function invisibly returns list object, hence need assign variable. total 4 different sections data list returned. : data plots parameters model","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"output-data","dir":"Articles","previous_headings":"Output","what":"Output Data","title":"Using Tidy FFT","text":"section go data components returned. can access data usual format output$data, return another list objects, 7 specific. Lets go .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"data-1","dir":"Articles","previous_headings":"Output > Output Data","what":"data","title":"Using Tidy FFT","text":"data element accessed output$data$data original data elements added . Let’s take look:","code":"output$data$data %>%   glimpse() #> Rows: 5,760 #> Columns: 6 #> $ harmonic   <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ time       <dbl> 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2,… #> $ y_actual   <dbl> 112, NA, NA, NA, NA, 118, NA, NA, NA, NA, 132, NA, NA, NA, … #> $ y_hat      <dbl> 292.1741, 291.0941, 290.0134, 288.9318, 287.8497, 286.7669,… #> $ x          <dbl> 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0,… #> $ error_term <dbl> -180.1741, NA, NA, NA, NA, -168.7669, NA, NA, NA, NA, -149.…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"error_data","dir":"Articles","previous_headings":"Output > Output Data","what":"error_data","title":"Using Tidy FFT","text":"error_data element accessed output$data$error_data tibble original data, plus elements error term actual value minus harmonic output. done harmonic level.","code":"output$data$error_data %>%   glimpse() #> Rows: 1,152 #> Columns: 6 #> $ harmonic   <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ time       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, … #> $ y_actual   <dbl> 112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,… #> $ y_hat      <dbl> 292.1741, 286.7669, 281.3475, 275.9261, 270.5130, 265.1185,… #> $ x          <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, … #> $ error_term <dbl> -180.17406, -168.76694, -149.34751, -146.92608, -149.51298,…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"input_vector","dir":"Articles","previous_headings":"Output > Output Data","what":"input_vector","title":"Using Tidy FFT","text":"input_vector just value column passed function.","code":"output$data$input_vector #>   [1] 112 118 132 129 121 135 148 148 136 119 104 118 115 126 141 135 125 149 #>  [19] 170 170 158 133 114 140 145 150 178 163 172 178 199 199 184 162 146 166 #>  [37] 171 180 193 181 183 218 230 242 209 191 172 194 196 196 236 235 229 243 #>  [55] 264 272 237 211 180 201 204 188 235 227 234 264 302 293 259 229 203 229 #>  [73] 242 233 267 269 270 315 364 347 312 274 237 278 284 277 317 313 318 374 #>  [91] 413 405 355 306 271 306 315 301 356 348 355 422 465 467 404 347 305 336 #> [109] 340 318 362 348 363 435 491 505 404 359 310 337 360 342 406 396 420 472 #> [127] 548 559 463 407 362 405 417 391 419 461 472 535 622 606 508 461 390 432"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"maximum_harmonic_tbl","dir":"Articles","previous_headings":"Output > Output Data","what":"maximum_harmonic_tbl","title":"Using Tidy FFT","text":"maximum_harmonic_tbl tibble data regarding maximum harmonic entered function, flexible data returned.","code":"output$data$maximum_harmonic_tbl %>%   glimpse() #> Rows: 720 #> Columns: 6 #> $ harmonic   <fct> 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,… #> $ time       <dbl> 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2,… #> $ y_actual   <dbl> 112, NA, NA, NA, NA, 118, NA, NA, NA, NA, 132, NA, NA, NA, … #> $ y_hat      <dbl> 288.7745, 279.8566, 270.9787, 262.1584, 253.4132, 244.7606,… #> $ x          <dbl> 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0,… #> $ error_term <dbl> -176.77449, NA, NA, NA, NA, -126.76057, NA, NA, NA, NA, -71…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"differenced_value_tbl","dir":"Articles","previous_headings":"Output > Output Data","what":"differenced_value_tbl","title":"Using Tidy FFT","text":"differenced_value_tbl tibble lag 1 difference value column supplied.","code":"output$data$differenced_value_tbl %>%   glimpse() #> Rows: 143 #> Columns: 1 #> $ value <dbl> 6, 14, -3, -8, 14, 13, 0, -12, -17, -15, 14, -3, 11, 15, -6, -10…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"dff_tbl","dir":"Articles","previous_headings":"Output > Output Data","what":"dff_tbl","title":"Using Tidy FFT","text":"dff_tbl tibble returned fft values, complex, real imaginary parts.","code":"output$data$dff_tbl %>%   glimpse() #> Rows: 144 #> Columns: 3 #> $ dff_trans <cpl> 40363.0000+0.0000i, 855.0323+8906.5596i, -48.1151+4098.6967i… #> $ real_part <dbl> 40363.00000, 855.03235, -48.11512, 517.59390, -137.07676, -2… #> $ imag_part <dbl> 0.00000, 8906.55958, 4098.69669, 3225.75142, 2323.01117, 200…"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"ts_obj","dir":"Articles","previous_headings":"Output > Output Data","what":"ts_obj","title":"Using Tidy FFT","text":"last data piece data section ts_obj. ts version input_vector","code":"output$data$ts_obj #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 1949 112 118 132 129 121 135 148 148 136 119 104 118 #> 1950 115 126 141 135 125 149 170 170 158 133 114 140 #> 1951 145 150 178 163 172 178 199 199 184 162 146 166 #> 1952 171 180 193 181 183 218 230 242 209 191 172 194 #> 1953 196 196 236 235 229 243 264 272 237 211 180 201 #> 1954 204 188 235 227 234 264 302 293 259 229 203 229 #> 1955 242 233 267 269 270 315 364 347 312 274 237 278 #> 1956 284 277 317 313 318 374 413 405 355 306 271 306 #> 1957 315 301 356 348 355 422 465 467 404 347 305 336 #> 1958 340 318 362 348 363 435 491 505 404 359 310 337 #> 1959 360 342 406 396 420 472 548 559 463 407 362 405 #> 1960 417 391 419 461 472 535 622 606 508 461 390 432"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"output-plots","dir":"Articles","previous_headings":"Output","what":"Output Plots","title":"Using Tidy FFT","text":"total five plots returned list. Three ggplot plots two plotly::ggplotly plots.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"harmonic_plt","dir":"Articles","previous_headings":"Output > Output Plots","what":"harmonic_plt","title":"Using Tidy FFT","text":"harmonic_plot ggplot plot shows harmonic waves graph set .harmonics greater 1.","code":"output$plots$harmonic_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"diff_plot","dir":"Articles","previous_headings":"Output > Output Plots","what":"diff_plot","title":"Using Tidy FFT","text":"diff_plot ggplot plot lag 1 differenced_value_tbl","code":"output$plots$diff_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"max_har_plot","dir":"Articles","previous_headings":"Output > Output Plots","what":"max_har_plot","title":"Using Tidy FFT","text":"max_har_plot ggplot plot maximum harmonic wave entered .harmonics","code":"output$plots$max_har_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"harmonic_plotly","dir":"Articles","previous_headings":"Output > Output Plots","what":"harmonic_plotly","title":"Using Tidy FFT","text":"harmonic_plotly plotly::ggplotly plot harmonic_plot","code":"output$plots$harmonic_plotly"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"max_har_plotly","dir":"Articles","previous_headings":"Output > Output Plots","what":"max_har_plotly","title":"Using Tidy FFT","text":"max_har_plotly plotly::ggplotly plot max_har_plot","code":"output$plots$max_har_plotly"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"parameters","dir":"Articles","previous_headings":"Output > Output Parameters","what":"parameters","title":"Using Tidy FFT","text":"parameters element list input parameters internal parameters.","code":"output$parameters #> $harmonics #> [1] 5 #>  #> $upsampling #> [1] 8 #>  #> $start_date #> [1] \"1949-01-01 UTC\" #>  #> $end_date #> [1] \"1960-12-01 UTC\" #>  #> $freq #> [1] 12"},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"output-model","dir":"Articles","previous_headings":"Output","what":"Output Model","title":"Using Tidy FFT","text":"model portion four pieces look .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/articles/using-tidy-fft.html","id":"m","dir":"Articles","previous_headings":"Output > Output Model","what":"m","title":"Using Tidy FFT","text":"parameter m internal parameter equal .harmonics / 2. fed TSA::harmonic along ts_obj parameter harmonic_obj object returned TSA::harmonic parameter harmonic_model harmonic model TSA::harmonic parameter model_summary summary harmonic model.","code":"output$model$m #> [1] 6 output$model$harmonic_obj %>% head() #>        cos(2*pi*t) cos(4*pi*t)   cos(6*pi*t) cos(8*pi*t)  cos(10*pi*t) #> [1,]  1.000000e+00         1.0  1.000000e+00         1.0  1.000000e+00 #> [2,]  8.660254e-01         0.5  1.655735e-13        -0.5 -8.660254e-01 #> [3,]  5.000000e-01        -0.5 -1.000000e+00        -0.5  5.000000e-01 #> [4,]  1.157757e-12        -1.0 -5.292262e-12         1.0  3.969798e-12 #> [5,] -5.000000e-01        -0.5  1.000000e+00        -0.5 -5.000000e-01 #> [6,] -8.660254e-01         0.5  3.142992e-12        -0.5  8.660254e-01 #>      cos(12*pi*t)   sin(2*pi*t)   sin(4*pi*t)   sin(6*pi*t)   sin(8*pi*t) #> [1,]            1 -4.134027e-13 -8.268054e-13  2.397771e-12 -1.653611e-12 #> [2,]           -1  5.000000e-01  8.660254e-01  1.000000e+00  8.660254e-01 #> [3,]            1  8.660254e-01  8.660254e-01  2.728918e-12 -8.660254e-01 #> [4,]           -1  1.000000e+00  2.315515e-12 -1.000000e+00 -4.631030e-12 #> [5,]            1  8.660254e-01 -8.660254e-01 -5.796483e-13  8.660254e-01 #> [6,]           -1  5.000000e-01 -8.660254e-01  1.000000e+00 -8.660254e-01 #>       sin(10*pi*t) #> [1,] -5.704992e-12 #> [2,]  5.000000e-01 #> [3,] -8.660254e-01 #> [4,]  1.000000e+00 #> [5,] -8.660254e-01 #> [6,]  5.000000e-01 output$model$harmonic_model #>  #> Call: #> stats::lm(formula = ts_obj ~ har_) #>  #> Coefficients: #>      (Intercept)   har_cos(2*pi*t)   har_cos(4*pi*t)   har_cos(6*pi*t)   #>         280.2986          -48.1494           16.7639           -6.3889   #>  har_cos(8*pi*t)  har_cos(10*pi*t)  har_cos(12*pi*t)   har_sin(2*pi*t)   #>           1.3889           -0.2534           -1.9097           -4.4632   #>  har_sin(4*pi*t)   har_sin(6*pi*t)   har_sin(8*pi*t)  har_sin(10*pi*t)   #>          11.6192          -11.1250           -7.9867           -6.4118 output$model$model_summary #>  #> Call: #> stats::lm(formula = ts_obj ~ har_) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -203.33  -93.48  -16.96   87.17  270.67  #>  #> Coefficients: #>                  Estimate Std. Error t value Pr(>|t|)     #> (Intercept)      280.2986     9.8379  28.492  < 2e-16 *** #> har_cos(2*pi*t)  -48.1494    13.9128  -3.461 0.000726 *** #> har_cos(4*pi*t)   16.7639    13.9128   1.205 0.230389     #> har_cos(6*pi*t)   -6.3889    13.9128  -0.459 0.646840     #> har_cos(8*pi*t)    1.3889    13.9128   0.100 0.920632     #> har_cos(10*pi*t)  -0.2534    13.9128  -0.018 0.985497     #> har_cos(12*pi*t)  -1.9097     9.8379  -0.194 0.846381     #> har_sin(2*pi*t)   -4.4632    13.9128  -0.321 0.748870     #> har_sin(4*pi*t)   11.6192    13.9128   0.835 0.405148     #> har_sin(6*pi*t)  -11.1250    13.9128  -0.800 0.425367     #> har_sin(8*pi*t)   -7.9867    13.9128  -0.574 0.566910     #> har_sin(10*pi*t)  -6.4118    13.9128  -0.461 0.645662     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 118.1 on 132 degrees of freedom #> Multiple R-squared:  0.1061, Adjusted R-squared:  0.03162  #> F-statistic: 1.424 on 11 and 132 DF,  p-value: 0.169"},{"path":"https://www.spsanderson.com/healthyR.ts/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Sanderson. Author, maintainer, copyright holder.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanderson S (2023). healthyR.ts: Time Series Modeling Companion 'healthyR'. R package version 0.3.0.9000, https://github.com/spsanderson/healthyR.ts.","code":"@Manual{,   title = {healthyR.ts: The Time Series Modeling Companion to 'healthyR'},   author = {Steven Sanderson},   year = {2023},   note = {R package version 0.3.0.9000},   url = {https://github.com/spsanderson/healthyR.ts}, }"},{"path":"https://www.spsanderson.com/healthyR.ts/index.html","id":"healthyrts-","dir":"","previous_headings":"","what":"The Time Series Modeling Companion to healthyR","title":"The Time Series Modeling Companion to healthyR","text":"goal healthyR.ts provide consistent verb framework performing time series analysis forecasting administrative clinical hospital data.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Time Series Modeling Companion to healthyR","text":"can install released version healthyR.ts CRAN : development version GitHub :","code":"install.packages(\"healthyR.ts\") # install.packages(\"devtools\") devtools::install_github(\"spsanderson/healthyR.ts\")"},{"path":"https://www.spsanderson.com/healthyR.ts/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"The Time Series Modeling Companion to healthyR","text":"basic example shows generate random walk data. Now data generated, lets take look .  still pretty noisy, lets see different way. Lets clear bit make easier see full range possible volatility random walks.  package comes wide variety functions Data Generators Statistics functions. function ts_random_walk() example Data Generator. Let’s take look plotting function.  Time Series Clustering via Features:  Time /Event Analysis   ARIMA Simulators  Automatic Workflows can thought Boiler Plate Time Series modeling. ’s infancy package. just start package!","code":"library(healthyR.ts) library(ggplot2)  df <- ts_random_walk()  head(df) #> # A tibble: 6 × 4 #>     run     x        y cum_y #>   <dbl> <dbl>    <dbl> <dbl> #> 1     1     1  0.0541  1054. #> 2     1     2 -0.143    904. #> 3     1     3 -0.0285   878. #> 4     1     4  0.245   1093. #> 5     1     5  0.0658  1165. #> 6     1     6  0.00266 1168. df %>%    ggplot(        mapping = aes(            x = x            , y = cum_y            , color = factor(run)            , group = factor(run)         )     ) +     geom_line(alpha = 0.8) +     ts_random_walk_ggplot_layers(df) library(dplyr) library(ggplot2)  df %>%     group_by(x) %>%     summarise(         min_y = min(cum_y),         max_y = max(cum_y)     ) %>%     ggplot(         aes(x = x)     ) +     geom_line(aes(y = max_y), color = \"steelblue\") +     geom_line(aes(y = min_y), color = \"firebrick\") +     geom_ribbon(aes(ymin = min_y, ymax = max_y), alpha = 0.2) +     ts_random_walk_ggplot_layers(df) data_tbl <- data.frame(   date_col = seq.Date(     from = as.Date(\"2020-01-01\"),     to   = as.Date(\"2022-06-01\"),     length.out = 365*2 + 180     ),   value = rnorm(365*2+180, mean = 100) )  ts_calendar_heatmap_plot(   .data          = data_tbl   , .date_col    = date_col   , .value_col   = value   , .interactive = FALSE ) data_tbl <- ts_to_tbl(AirPassengers) %>%   mutate(group_id = rep(1:12, 12))  output <- ts_feature_cluster(   .data = data_tbl,   .date_col = date_col,   .value_col = value,   group_id,   .features = c(\"acf_features\",\"entropy\"),   .scale = TRUE,   .prefix = \"ts_\",   .centers = 3 )  ts_feature_cluster_plot(   .data = output,   .date_col = date_col,   .value_col = value,   .center = 2,   group_id ) library(dplyr) df <- ts_to_tbl(AirPassengers) %>% select(-index)  ts_time_event_analysis_tbl(   .data = df,   .horizon = 6,   .date_col = date_col,   .value_col = value,   .direction = \"both\" ) %>%   ts_event_analysis_plot() ts_time_event_analysis_tbl(   .data = df,   .horizon = 6,   .date_col = date_col,   .value_col = value,   .direction = \"both\" ) %>%   ts_event_analysis_plot(.plot_type = \"individual\") output <- ts_arima_simulator() output$plots$static_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Steven Paul Sanderson II, MPH Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/arima_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast arima.string — arima_string","title":"Forecast arima.string — arima_string","text":"Forecast arima.string","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/arima_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast arima.string — arima_string","text":"","code":"arima_string(object, padding = FALSE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/arima_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast arima.string — arima_string","text":"string","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/arima_string.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forecast arima.string — arima_string","text":"Author(s) forecast package","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/assign_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Misc for boilerplate — assign_value","title":"Misc for boilerplate — assign_value","text":"Misc boilerplate","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/assign_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Misc for boilerplate — assign_value","text":"","code":"assign_value(name, value, cr = TRUE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/assign_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Misc for boilerplate — assign_value","text":"return value, called side effects","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically Stationarize Time Series Data — auto_stationarize","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"function attempts make non-stationary time series stationary. function attempts make given time series stationary applying transformations differencing logarithmic transformation. time series already stationary, returns original time series.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"","code":"auto_stationarize(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"time series already stationary, returns original time series. transformation applied make stationary, returns list two elements: stationary_ts: stationary time series. ndiffs: order differencing applied make stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"input time series non-stationary (determined Augmented Dickey-Fuller test), function try make stationary applying series transformations: checks time series already stationary using Augmented Dickey-Fuller test. stationary, attempts logarithmic transformation. logarithmic transformation work, applies differencing.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/auto_stationarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically Stationarize Time Series Data — auto_stationarize","text":"","code":"# Example 1: Using the AirPassengers dataset auto_stationarize(AirPassengers) #> The time series is already stationary via ts_adf_test(). #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 1949 112 118 132 129 121 135 148 148 136 119 104 118 #> 1950 115 126 141 135 125 149 170 170 158 133 114 140 #> 1951 145 150 178 163 172 178 199 199 184 162 146 166 #> 1952 171 180 193 181 183 218 230 242 209 191 172 194 #> 1953 196 196 236 235 229 243 264 272 237 211 180 201 #> 1954 204 188 235 227 234 264 302 293 259 229 203 229 #> 1955 242 233 267 269 270 315 364 347 312 274 237 278 #> 1956 284 277 317 313 318 374 413 405 355 306 271 306 #> 1957 315 301 356 348 355 422 465 467 404 347 305 336 #> 1958 340 318 362 348 363 435 491 505 404 359 310 337 #> 1959 360 342 406 396 420 472 548 559 463 407 362 405 #> 1960 417 391 419 461 472 535 622 606 508 461 390 432  # Example 2: Using the BJsales dataset auto_stationarize(BJsales) #> The time series is not stationary. Attempting to make it stationary... #> Logrithmic Transformation Failed. #> Data requires more single differencing than its frequency, trying double #> differencing #> Double Differencing of order 1 made the time series stationary #> $stationary_ts #> Time Series: #> Start = 3  #> End = 150  #> Frequency = 1  #>   [1]  0.5 -0.4  0.6  1.1 -2.8  3.0 -1.1  0.6 -0.5 -0.5  0.1  2.0 -0.6  0.8  1.2 #>  [16] -3.4 -0.7 -0.3  1.7  3.0 -3.2  0.9  2.2 -2.5 -0.4  2.6 -4.3  2.0 -3.1  2.7 #>  [31] -2.1  0.1  2.1 -0.2 -2.2  0.6  1.0 -2.6  3.0  0.3  0.2 -0.8  1.0  0.0  3.2 #>  [46] -2.2 -4.7  1.2  0.8 -0.6 -0.4  0.6  1.0 -1.6 -0.1  3.4 -0.9 -1.7 -0.5  0.8 #>  [61]  2.4 -1.9  0.6 -2.2  2.6 -0.1 -2.7  1.7 -0.3  1.9 -2.7  1.1 -0.6  0.9  0.0 #>  [76]  1.8 -0.5 -0.4 -1.2  2.6 -1.8  1.7 -0.9  0.6 -0.4  3.0 -2.8  3.1 -2.3 -1.1 #>  [91]  2.1 -0.3 -1.7 -0.8 -0.4  1.1 -1.5  0.3  1.4 -2.0  1.3 -0.3  0.4 -3.5  1.1 #> [106]  2.6  0.4 -1.3  2.0 -1.6  0.6 -0.1 -1.4  1.6  1.6 -3.4  1.7 -2.2  2.1 -2.0 #> [121] -0.2  0.2  0.7 -1.4  1.8 -0.1 -0.7  0.4  0.4  1.0 -2.4  1.0 -0.4  0.8 -1.0 #> [136]  1.4 -1.2  1.1 -0.9  0.5  1.9 -0.6  0.3 -1.4 -0.9 -0.5  1.4  0.1 #>  #> $ndiffs #> [1] 1 #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -6.562008 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"double_diff\" #>  #> $ret #> [1] TRUE #>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function - Calibrate and Plot — calibrate_and_plot","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"function helper function. take set workflows perform modeltime::modeltime_calibrate() modeltime::plot_modeltime_forecast().","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"","code":"calibrate_and_plot(   ...,   .type = \"testing\",   .splits_obj,   .data,   .print_info = TRUE,   .interactive = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"... workflow(s) want add function. .type Either training(splits) testing(splits) data. .splits_obj splits object. .data full data set. .print_info default TRUE print calibration accuracy tibble resulting plotly plot. .interactive defaults FALSE. controls forecast plot interactive via plotly.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"original time series, simulated values plots","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"function expects take workflows fitted training data.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function - Calibrate and Plot — calibrate_and_plot","text":"","code":"if (FALSE) { suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(recipes)) suppressPackageStartupMessages(library(rsample)) suppressPackageStartupMessages(library(parsnip)) suppressPackageStartupMessages(library(workflows))  data <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- timetk::time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_obj <- recipe(value ~ ., data = training(splits))  model_spec <- linear_reg(    mode = \"regression\"    , penalty = 0.1    , mixture = 0.5 ) %>%    set_engine(\"lm\")  wflw <- workflow() %>%    add_recipe(rec_obj) %>%    add_model(model_spec) %>%    fit(training(splits))  output <- calibrate_and_plot(   wflw   , .type = \"training\"   , .splits_obj = splits   , .data = data   , .print_info = FALSE   , .interactive = FALSE  ) }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/chr_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Misc for boilerplate — chr_assign","title":"Misc for boilerplate — chr_assign","text":"Misc boilerplate","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/chr_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Misc for boilerplate — chr_assign","text":"","code":"chr_assign(name, value, cr = TRUE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/chr_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Misc for boilerplate — chr_assign","text":"return value, called side effects","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval Generic — ci_hi","title":"Confidence Interval Generic — ci_hi","text":"Gets upper 97.5% quantile numeric vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval Generic — ci_hi","text":"","code":"ci_hi(.x, .na_rm = FALSE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval Generic — ci_hi","text":".x vector numeric values .na_rm Boolean, defaults FALSE. Passed quantile function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval Generic — ci_hi","text":"numeric value.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval Generic — ci_hi","text":"Gets upper 97.5% quantile numeric vector.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Interval Generic — ci_hi","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_hi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval Generic — ci_hi","text":"","code":"x <- mtcars$mpg ci_hi(x) #> [1] 32.7375"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval Generic — ci_lo","title":"Confidence Interval Generic — ci_lo","text":"Gets lower 2.5% quantile numeric vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval Generic — ci_lo","text":"","code":"ci_lo(.x, .na_rm = FALSE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval Generic — ci_lo","text":".x vector numeric values .na_rm Boolean, defaults FALSE. Passed quantile function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval Generic — ci_lo","text":"numeric value.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval Generic — ci_lo","text":"Gets lower 2.5% quantile numeric vector.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Interval Generic — ci_lo","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ci_lo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval Generic — ci_lo","text":"","code":"x <- mtcars$mpg ci_lo(x) #> [1] 10.4"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide Colorblind Compliant Colors — color_blind","title":"Provide Colorblind Compliant Colors — color_blind","text":"8 Hex RGB color definitions suitable charts colorblind people.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide Colorblind Compliant Colors — color_blind","text":"","code":"color_blind()"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide Colorblind Compliant Colors — color_blind","text":"vector 8 Hex RGB definitions.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide Colorblind Compliant Colors — color_blind","text":"function used others order help render plots color blind.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provide Colorblind Compliant Colors — color_blind","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/color_blind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide Colorblind Compliant Colors — color_blind","text":"","code":"color_blind() #> [1] \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\" #> [8] \"#CC79A7\""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/get_recipe_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Misc for boilerplate — get_recipe_call","title":"Misc for boilerplate — get_recipe_call","text":"Misc boilerplate","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/get_recipe_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Misc for boilerplate — get_recipe_call","text":"","code":"get_recipe_call(.rec_call)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/get_recipe_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Misc for boilerplate — get_recipe_call","text":"return value, called side effects","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Analysis — internal_ts_backward_event_tbl","title":"Event Analysis — internal_ts_backward_event_tbl","text":"function sits inside ts_time_event_analysis_tbl(). meant used . internal function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Analysis — internal_ts_backward_event_tbl","text":"","code":"internal_ts_backward_event_tbl(.data, .horizon)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Analysis — internal_ts_backward_event_tbl","text":".data date.frame/tibble holds data. .horizon far want look back ahead.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event Analysis — internal_ts_backward_event_tbl","text":"tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event Analysis — internal_ts_backward_event_tbl","text":"helper function ts_time_event_analysis_tbl() .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_backward_event_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Event Analysis — internal_ts_backward_event_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Analysis — internal_ts_both_event_tbl","title":"Event Analysis — internal_ts_both_event_tbl","text":"function sits inside ts_time_event_analysis_tbl(). meant used . internal function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Analysis — internal_ts_both_event_tbl","text":"","code":"internal_ts_both_event_tbl(.data, .horizon)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Analysis — internal_ts_both_event_tbl","text":".data date.frame/tibble holds data. .horizon far want look back ahead.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event Analysis — internal_ts_both_event_tbl","text":"tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event Analysis — internal_ts_both_event_tbl","text":"helper function ts_time_event_analysis_tbl() .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_both_event_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Event Analysis — internal_ts_both_event_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Analysis — internal_ts_forward_event_tbl","title":"Event Analysis — internal_ts_forward_event_tbl","text":"function sits inside ts_time_event_analysis_tbl(). meant used . internal function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Analysis — internal_ts_forward_event_tbl","text":"","code":"internal_ts_forward_event_tbl(.data, .horizon)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Analysis — internal_ts_forward_event_tbl","text":".data date.frame/tibble holds data. .horizon far want look back ahead.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event Analysis — internal_ts_forward_event_tbl","text":"tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event Analysis — internal_ts_forward_event_tbl","text":"helper function ts_time_event_analysis_tbl() .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/internal_ts_forward_event_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Event Analysis — internal_ts_forward_event_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Method Extraction Helper — model_extraction_helper","title":"Model Method Extraction Helper — model_extraction_helper","text":"takes model fit returns method fit object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Method Extraction Helper — model_extraction_helper","text":"","code":"model_extraction_helper(.fit_object)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Method Extraction Helper — model_extraction_helper","text":".fit_object time-series fitted model","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Method Extraction Helper — model_extraction_helper","text":"model description","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Method Extraction Helper — model_extraction_helper","text":"Currently supports forecasting model one following forecast package: Arima auto.arima ets nnetar workflow fitted models.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Method Extraction Helper — model_extraction_helper","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/model_extraction_helper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Method Extraction Helper — model_extraction_helper","text":"","code":"# NOT RUN if (FALSE) { suppressPackageStartupMessages(library(forecast))  # Create a model fit_arima  <- auto.arima(AirPassengers)  model_extraction_helper(fit_arima) }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"return value rather used string functions together.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/required_pkgs.healthyR.ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Requited Packages — required_pkgs.step_ts_acceleration","title":"Requited Packages — required_pkgs.step_ts_acceleration","text":"Requited Packages Required Packages","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/required_pkgs.healthyR.ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Requited Packages — required_pkgs.step_ts_acceleration","text":"","code":"required_pkgs.step_ts_acceleration(x, ...)  required_pkgs.step_ts_velocity(x, ...)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/required_pkgs.healthyR.ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Requited Packages — required_pkgs.step_ts_acceleration","text":"x recipe step","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/required_pkgs.healthyR.ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Requited Packages — required_pkgs.step_ts_acceleration","text":"character vector character vector","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipes Time Series Acceleration Generator — step_ts_acceleration","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"step_ts_acceleration creates specification recipe step convert numeric data time series acceleration.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"","code":"step_ts_acceleration(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"ts_acceleration\") )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables used create new variables. selected variables class numeric role model terms created step, analysis role assigned?. default, function assumes new variable columns created original variables used predictors model. trained logical indicate quantities preprocessing estimated. columns character string variables used inputs. field placeholder populated recipes::prep() used. skip logical. step skipped recipe baked bake.recipe()? operations baked prep.recipe() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"step_ts_acceleration, updated version recipe new step added sequence existing steps (). Main Recipe Functions: recipes::recipe() recipes::prep() recipes::bake()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"Numeric Variables Unlike steps, step_ts_acceleration remove original numeric variables. recipes::step_rm() can used purpose.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_acceleration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recipes Time Series Acceleration Generator — step_ts_acceleration","text":"","code":"suppressPackageStartupMessages(library(dplyr)) #> Warning: package 'dplyr' was built under R version 4.2.3 suppressPackageStartupMessages(library(recipes)) #> Warning: package 'recipes' was built under R version 4.2.3  len_out    = 10 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  # Create a recipe object rec_obj <- recipe(a ~ ., data = data_tbl) %>%   step_ts_acceleration(b)  # View the recipe object rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 2 #>  #> ── Operations  #> • Time Series Acceleration transformation on: <none>  # Prepare the recipe object prep(rec_obj) #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 2 #>  #> ── Training information  #> Training data contained 10 data points and no incomplete rows. #>  #> ── Operations  #> • Time Series Acceleration transformation on: ~b | Trained  # Bake the recipe object - Adds the Time Series Signature bake(prep(rec_obj), data_tbl) #> # A tibble: 10 × 4 #>    date_col        b      a acceleration_b #>    <date>      <dbl>  <dbl>          <dbl> #>  1 2021-01-01 0.122  -1.23         NA      #>  2 2021-02-01 0.703   0.734        NA      #>  3 2021-03-01 0.853   0.305        -0.432  #>  4 2021-04-01 0.110  -1.48         -0.892  #>  5 2021-05-01 0.657   0.616         1.29   #>  6 2021-06-01 0.405  -0.470        -0.799  #>  7 2021-07-01 0.0996 -0.867        -0.0538 #>  8 2021-08-01 0.464  -1.27          0.670  #>  9 2021-09-01 0.130  -0.669        -0.699  #> 10 2021-10-01 0.418   1.13          0.621   rec_obj %>% prep() %>% juice() #> # A tibble: 10 × 4 #>    date_col        b      a acceleration_b #>    <date>      <dbl>  <dbl>          <dbl> #>  1 2021-01-01 0.122  -1.23         NA      #>  2 2021-02-01 0.703   0.734        NA      #>  3 2021-03-01 0.853   0.305        -0.432  #>  4 2021-04-01 0.110  -1.48         -0.892  #>  5 2021-05-01 0.657   0.616         1.29   #>  6 2021-06-01 0.405  -0.470        -0.799  #>  7 2021-07-01 0.0996 -0.867        -0.0538 #>  8 2021-08-01 0.464  -1.27          0.670  #>  9 2021-09-01 0.130  -0.669        -0.699  #> 10 2021-10-01 0.418   1.13          0.621"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipes Time Series velocity Generator — step_ts_velocity","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"step_ts_velocity creates specification recipe step convert numeric data time series velocity.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"","code":"step_ts_velocity(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   columns = NULL,   skip = FALSE,   id = rand_id(\"ts_velocity\") )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables used create new variables. selected variables class numeric role model terms created step, analysis role assigned?. default, function assumes new variable columns created original variables used predictors model. trained logical indicate quantities preprocessing estimated. columns character string variables used inputs. field placeholder populated recipes::prep() used. skip logical. step skipped recipe baked bake.recipe()? operations baked prep.recipe() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"step_ts_velocity, updated version recipe new step added sequence existing steps (). Main Recipe Functions: recipes::recipe() recipes::prep() recipes::bake()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"Numeric Variables Unlike steps, step_ts_velocity remove original numeric variables. recipes::step_rm() can used purpose.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/step_ts_velocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recipes Time Series velocity Generator — step_ts_velocity","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(recipes))  len_out    = 10 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  # Create a recipe object rec_obj <- recipe(a ~ ., data = data_tbl) %>%   step_ts_velocity(b)  # View the recipe object rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 2 #>  #> ── Operations  #> • Time Series Velocity transformation on: <none>  # Prepare the recipe object prep(rec_obj) #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 2 #>  #> ── Training information  #> Training data contained 10 data points and no incomplete rows. #>  #> ── Operations  #> • Time Series Velocity transformation on: ~b | Trained  # Bake the recipe object - Adds the Time Series Signature bake(prep(rec_obj), data_tbl) #> # A tibble: 10 × 4 #>    date_col       b       a velocity_b #>    <date>     <dbl>   <dbl>      <dbl> #>  1 2021-01-01 0.575  0.0852   NA       #>  2 2021-02-01 0.280  0.387    -0.295   #>  3 2021-03-01 0.270  0.517    -0.00967 #>  4 2021-04-01 0.818 -0.994     0.548   #>  5 2021-05-01 0.654  0.0261   -0.164   #>  6 2021-06-01 0.422  1.86     -0.232   #>  7 2021-07-01 0.939 -0.924     0.517   #>  8 2021-08-01 0.472 -1.35     -0.467   #>  9 2021-09-01 0.877  1.59      0.405   #> 10 2021-10-01 0.281 -0.0806   -0.596    rec_obj %>% prep() %>% juice() #> # A tibble: 10 × 4 #>    date_col       b       a velocity_b #>    <date>     <dbl>   <dbl>      <dbl> #>  1 2021-01-01 0.575  0.0852   NA       #>  2 2021-02-01 0.280  0.387    -0.295   #>  3 2021-03-01 0.270  0.517    -0.00967 #>  4 2021-04-01 0.818 -0.994     0.548   #>  5 2021-05-01 0.654  0.0261   -0.164   #>  6 2021-06-01 0.422  1.86     -0.232   #>  7 2021-07-01 0.939 -0.924     0.517   #>  8 2021-08-01 0.472 -1.35     -0.467   #>  9 2021-09-01 0.877  1.59      0.405   #> 10 2021-10-01 0.281 -0.0806   -0.596"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit Metaprogramming section Advanced R.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidyeval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy eval helpers — tidyeval","text":"functions return value rather used side effects.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy Style FFT — tidy_fft","title":"Tidy Style FFT — tidy_fft","text":"Perform fft using stats::fft() return tidier style output list plots.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy Style FFT — tidy_fft","text":"","code":"tidy_fft(   .data,   .date_col,   .value_col,   .frequency = 12L,   .harmonics = 1L,   .upsampling = 10L )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy Style FFT — tidy_fft","text":".data data.frame/tibble pass analysis. .date_col column holds date. .value_col column holds data analyzed. .frequency frequency data, 12 = monthly example. .harmonics many harmonic waves want produce. .upsampling sampling time series.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy Style FFT — tidy_fft","text":"list object returned invisibly.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy Style FFT — tidy_fft","text":"function perform different things, primarily compute Fast Discrete Fourier Transform (FFT) using stats::fft(). formula given : $$y[h] = sum_{k=1}^n z[k]*exp(-2*pi*1i*(k-1)*(h-1)/n)$$ many items returned inside list invisibly. four primary categories data returned list. primary categories items inside . data: data error_data input_vector maximum_harmonic_tbl differenced_value_tbl dff_tbl ts_obj plots: harmonic_plot diff_plot max_har_plot harmonic_plotly max_har_plotly parameters: harmonics upsampling start_date end_date freq model: m harmonic_obj harmonic_model model_summary","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tidy Style FFT — tidy_fft","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/tidy_fft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy Style FFT — tidy_fft","text":"","code":"suppressPackageStartupMessages(library(dplyr))  data_tbl <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  a <- tidy_fft(   .data = data_tbl,   .value_col = value,   .date_col = date_col,   .harmonics = 3,   .frequency = 12 ) #> Registered S3 methods overwritten by 'TSA': #>   method       from     #>   fitted.Arima forecast #>   plot.Arima   forecast  a$plots$max_har_plot #> Warning: Removed 1296 rows containing missing values (`geom_line()`). #> Warning: Removed 1296 rows containing missing values (`geom_point()`).  a$plots$harmonic_plot #> Warning: Removed 3888 rows containing missing values (`geom_line()`). #> Warning: Removed 3888 rows containing missing values (`geom_point()`)."},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Function Acceleration — ts_acceleration_augment","title":"Augment Function Acceleration — ts_acceleration_augment","text":"Takes numeric vector return acceleration vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Function Acceleration — ts_acceleration_augment","text":"","code":"ts_acceleration_augment(.data, .value, .names = \"auto\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Function Acceleration — ts_acceleration_augment","text":".data data passed augmented function. .value passed rlang::enquo() capture vectors want augment. .names default \"auto\"","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Function Acceleration — ts_acceleration_augment","text":"augmented tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment Function Acceleration — ts_acceleration_augment","text":"Takes numeric vector return acceleration vector. acceleration time series computed taking second difference, $$(x_t - x_t1) - (x_t - x_t1)_t1$$ function intended used order add columns tibble.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Augment Function Acceleration — ts_acceleration_augment","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment Function Acceleration — ts_acceleration_augment","text":"","code":"suppressPackageStartupMessages(library(dplyr))  len_out    = 10 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  ts_acceleration_augment(data_tbl, b) #> # A tibble: 10 × 4 #>    date_col         a      b acceleration_b #>    <date>       <dbl>  <dbl>          <dbl> #>  1 2021-01-01  0.443  0.486        NA       #>  2 2021-02-01 -1.07   0.0806       NA       #>  3 2021-03-01 -0.498  0.223         0.548   #>  4 2021-04-01  1.38   0.309        -0.0565  #>  5 2021-05-01 -1.01   0.359        -0.0354  #>  6 2021-06-01  0.0423 0.414         0.00447 #>  7 2021-07-01  0.810  0.522         0.0539  #>  8 2021-08-01 -1.09   0.586        -0.0449  #>  9 2021-09-01  0.254  0.826         0.177   #> 10 2021-10-01  0.342  0.748        -0.319"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Function Time Series Acceleration — ts_acceleration_vec","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"Takes numeric vector return acceleration vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"","code":"ts_acceleration_vec(.x)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":".x numeric vector","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"numeric vector","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"Takes numeric vector return acceleration vector. acceleration time series computed taking second difference, $$(x_t - x_t1) - (x_t - x_t1)_t1$$ function can used . also basis function ts_acceleration_augment().","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_acceleration_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Function Time Series Acceleration — ts_acceleration_vec","text":"","code":"suppressPackageStartupMessages(library(dplyr))  len_out    = 25 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  vec_1 <- ts_acceleration_vec(data_tbl$b)  plot(data_tbl$b) lines(data_tbl$b) lines(vec_1, col = \"blue\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":"function performs Augmented Dickey-Fuller test assess stationarity time series. Augmented Dickey-Fuller (ADF) test used determine given time series stationary. function takes numeric vector input, can optionally specify lag order .k parameter. .k provided, calculated based number observations using formula. test statistic p-value returned.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":"","code":"ts_adf_test(.x, .k = NULL)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":".x numeric vector representing time series tested stationarity. .k optional parameter specifying number lags use ADF test (default calculated).","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":"list containing results Augmented Dickey-Fuller test: test_stat: test statistic ADF test. p_value: p-value test.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_adf_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augmented Dickey-Fuller Test for Time Series Stationarity — ts_adf_test","text":"","code":"# Example 1: Using the AirPassengers dataset ts_adf_test(AirPassengers) #> $test_stat #> [1] -7.318571 #>  #> $p_value #> [1] 0.01 #>   # Example 2: Using a custom time series vector custom_ts <- rnorm(100, 0, 1) ts_adf_test(custom_ts) #> $test_stat #> [1] -4.565089 #>  #> $p_value #> [1] 0.01 #>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate ARIMA Model — ts_arima_simulator","title":"Simulate ARIMA Model — ts_arima_simulator","text":"Returns list output n simulations user specified ARIMA model. function returns list object two sections: data plots data section output contains following: simulation_time_series object (ts format) simulation_time_series_output (mts format) simulations_tbl (simulation_time_series_object tibble) simulations_median_value_tbl (contains stats::median() value simulated data) plots section output contains following: static_plot ggplot2 plot plotly_plot plotly plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate ARIMA Model — ts_arima_simulator","text":"","code":"ts_arima_simulator(   .n = 100,   .num_sims = 25,   .order_p = 0,   .order_d = 0,   .order_q = 0,   .ma = c(),   .ar = c(),   .sim_color = \"steelblue\",   .alpha = 0.05,   .size = 1,   ... )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate ARIMA Model — ts_arima_simulator","text":".n number points simulated. .num_sims number different simulations run. .order_p p value, order AR term. .order_d d value, number differencing make series stationary .order_q q value, order MA term. .ma can list MA terms respectively desired. .ar can list AR terms respectively desired. .sim_color color lines simulated series. .alpha alpha component ggplot2 plotly lines. .size size median line ggplot2 ... additional arguments stats::arima.sim","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate ARIMA Model — ts_arima_simulator","text":"list object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate ARIMA Model — ts_arima_simulator","text":"function takes user specified arima model. specification passed stats::arima.sim()","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate ARIMA Model — ts_arima_simulator","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_arima_simulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate ARIMA Model — ts_arima_simulator","text":"","code":"output <- ts_arima_simulator() output$plots$static_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_arima","title":"Boilerplate Workflow — ts_auto_arima","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_arima","text":"","code":"ts_auto_arima(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_arima\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_arima","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_arima .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_arima","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_arima","text":"uses modeltime::arima_reg() engine set arima","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_arima","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_arima","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime) #> Warning: package 'modeltime' was built under R version 4.2.3  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_aa <- ts_auto_arima(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .cv_slice_limit = 2,   .tune = FALSE ) #> frequency = 12 observations per 1 year  ts_aa$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2, .cv_slice_limit = 2) #>  #> $recipe_syntax #> [1] \"ts_arima_recipe <-\"                                                                                                                                                                            #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2, \\n    .cv_slice_limit = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_arima_xgboost","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"","code":"ts_auto_arima_xgboost(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_arima_boost\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_arima_boost .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"uses modeltime::arima_boost() engine set xgboost","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_arima_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_arima_xgboost","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_auto_arima_xgboost <- ts_auto_arima_xgboost(   .data = data,   .num_cores = 1,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .cv_slice_limit = 2,   .tune = FALSE ) #> frequency = 12 observations per 1 year  ts_auto_arima_xgboost$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 1, .cv_slice_limit = 2) #>  #> $recipe_syntax #> [1] \"ts_arima_boost_recipe <-\"                                                                                                                                                                      #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 1, \\n    .cv_slice_limit = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_croston","title":"Boilerplate Workflow — ts_auto_croston","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_croston","text":"","code":"ts_auto_croston(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_croston\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_croston","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_exp_smooth .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_croston","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_croston","text":"uses forecast::croston() parsnip engine. model use exogenous regressors, univariate model : value ~ date used .date_col .value_col provide.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_croston","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_croston.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_croston","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_exp <- ts_auto_croston(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE ) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map(...)`. #> Caused by warning: #> ! A correlation computation is required, but `estimate` is constant and has 0 standard deviation, resulting in a divide by 0 error. `NA` will be returned.  ts_exp$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_croston_recipe <-\"                                                                                                                                               #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_exp_smoothing","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"","code":"ts_auto_exp_smoothing(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_exp_smooth\",   .tune = TRUE,   .grid_size = 20,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_exp_smooth .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"uses modeltime::exp_smoothing() hood engine set ets","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_exp_smoothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_exp_smoothing","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_exp <- ts_auto_exp_smoothing(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 20,   .tune = FALSE ) #> frequency = 12 observations per 1 year  ts_exp$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 20, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_exp_smooth_recipe <-\"                                                                                                                                             #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 20, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_glmnet","title":"Boilerplate Workflow — ts_auto_glmnet","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_glmnet","text":"","code":"ts_auto_glmnet(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_glmnet\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_glmnet","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_glmnet .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_glmnet","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_glmnet","text":"uses parsnip::linear_reg() sets engine glmnet","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_glmnet","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_glmnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_glmnet","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_glmnet <- ts_auto_glmnet(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE )  ts_glmnet$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_glmnet_recipe <-\"                                                                                                                                                #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Variable mutation for: as.numeric(^date_col) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors(), ... #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_lm","title":"Boilerplate Workflow — ts_auto_lm","text":"boilerplate function create automatically following: recipe model specification workflow calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_lm","text":"","code":"ts_auto_lm(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_lm\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_lm","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_lm .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_lm","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_lm","text":"uses parsnip::linear_reg() sets engine lm","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_lm","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_lm","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_lm <- ts_auto_lm(   .data = data,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ ., ) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning in `predict.lm()`: #> ! prediction from a rank-deficient fit may be misleading #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning in `predict.lm()`: #> ! prediction from a rank-deficient fit may be misleading  ts_lm$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits) #>  #> $recipe_syntax #> [1] \"ts_lm_recipe <-\"                                                                                                     #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Variable mutation for: as.numeric(^date_col) #> • Dummy variables from: recipes::all_nominal() #> • Sparse, unbalanced variable filter on: recipes::all_predictors(), ... #> • Centering and scaling for: recipes::all_numeric_predictors(), ... #> • Linear combination filter on: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_mars","title":"Boilerplate Workflow — ts_auto_mars","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_mars","text":"","code":"ts_auto_mars(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_mars\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_mars","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_mars .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_mars","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_mars","text":"uses parsnip::mars() function engine set earth.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_mars","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_mars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_mars","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_auto_mars <- ts_auto_mars(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 20,   .tune = FALSE ) #> Warning: package 'earth' was built under R version 4.2.2 #> Loading required package: Formula #> Warning: package 'Formula' was built under R version 4.2.2 #> Loading required package: plotmo #> Loading required package: plotrix #> Warning: package 'plotrix' was built under R version 4.2.3 #> Loading required package: TeachingDemos  ts_auto_mars$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 20, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_mars_recipe <-\"                                                                                                                                                   #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 20, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_nnetar","title":"Boilerplate Workflow — ts_auto_nnetar","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_nnetar","text":"","code":"ts_auto_nnetar(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_nnetar\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_nnetar","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_nnetar .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_nnetar","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_nnetar","text":"uses modeltime::nnetar_reg() function engine set nnetar.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_nnetar","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_nnetar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_nnetar","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_nnetar <- ts_auto_nnetar(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE ) #> frequency = 12 observations per 1 year  ts_nnetar$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_nnetar_recipe <-\"                                                                                                                                                #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_prophet_boost","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"","code":"ts_auto_prophet_boost(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_prophet_boost\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_prophet_boost .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"uses modeltime::prophet_boost() function engine set prophet_xgboost.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_boost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_prophet_boost","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_prophet_boost <- ts_auto_prophet_boost(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE ) #> Disabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this. #> Disabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.  ts_prophet_boost$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_prophet_boost_recipe <-\"                                                                                                                                         #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_prophet_reg","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"","code":"ts_auto_prophet_reg(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_prophet_reg\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_prophet .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"uses modeltime::prophet_reg() function engine set prophet.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_prophet_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_prophet_reg","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_prophet_reg <- ts_auto_prophet_reg(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE ) #> Disabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this. #> Disabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.  ts_prophet_reg$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_prophet_reg_recipe <-\"                                                                                                                                           #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #> • Centering and scaling for: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Time Series Recipe — ts_auto_recipe","title":"Build a Time Series Recipe — ts_auto_recipe","text":"Automatically builds generic time series recipe objects given tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Time Series Recipe — ts_auto_recipe","text":"","code":"ts_auto_recipe(   .data,   .date_col,   .pred_col,   .step_ts_sig = TRUE,   .step_ts_rm_misc = TRUE,   .step_ts_dummy = TRUE,   .step_ts_fourier = TRUE,   .step_ts_fourier_period = 365/12,   .K = 1,   .step_ts_yeo = TRUE,   .step_ts_nzv = TRUE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Time Series Recipe — ts_auto_recipe","text":".data data going modeled. must supply tibble. .date_col column holds date time series. .pred_col column predicted. .step_ts_sig Boolean indicating timetk::step_timeseries_signature() added, default TRUE. .step_ts_rm_misc Boolean indicating following items removed time series signature, default TRUE. iso$ xts$ hour min sec .pm .step_ts_dummy Boolean indicating all_nominal_predictors() dummied one hot encoding. .step_ts_fourier Boolean indicating timetk::step_fourier() added recipe. .step_ts_fourier_period number 365/12, 365/4 365 indicting period fourier term. numeric period oscillation frequency. .K number orders include sine/cosine fourier series. orders increase number fourier terms therefore variance fitted model expense bias. See details examples K specification. .step_ts_yeo Boolean indicating recipes::step_YeoJohnson() added recipe. .step_ts_nzv Boolean indicating recipes::step_nzv() run predictors.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a Time Series Recipe — ts_auto_recipe","text":"build couple generic recipe objects return items list.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build a Time Series Recipe — ts_auto_recipe","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Time Series Recipe — ts_auto_recipe","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- initial_time_split(  data_tbl  , prop = 0.8 )  ts_auto_recipe(     .data = data_tbl     , .date_col = date_col     , .pred_col = value ) #> $rec_base #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> $rec_date #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #>  #> $rec_date_fourier #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #> • Fourier series features from: ds #> • Yeo-Johnson transformation on: value #>  #> $rec_date_fourier_nzv #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #> • Fourier series features from: ds #> • Yeo-Johnson transformation on: value #> • Sparse, unbalanced variable filter on: recipes::all_predictors() #>   ts_auto_recipe(   .data = training(splits)   , .date_col = date_col   , .pred_col = value ) #> $rec_base #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> $rec_date #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #>  #> $rec_date_fourier #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #> • Fourier series features from: ds #> • Yeo-Johnson transformation on: value #>  #> $rec_date_fourier_nzv #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: ds #> • Centering and scaling for: dplyr::contains(\"index.num\"), ... #> • Variables removed: dplyr::matches(\"(iso$)|(xts$)|(hour)|(min)|(sec)|(am.pm)\") #> • Dummy variables from: recipes::all_nominal_predictors() #> • Fourier series features from: ds #> • Yeo-Johnson transformation on: value #> • Sparse, unbalanced variable filter on: recipes::all_predictors() #>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_smooth_es","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"boilerplate function automatically create following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"","code":"ts_auto_smooth_es(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_smooth_es\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_smooth_es","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_smooth_es .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"uses modeltime::exp_smoothing() sets parsnip::engine smooth_es.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_smooth_es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_smooth_es","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_smooth_es <- ts_auto_smooth_es(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 3,   .tune = FALSE ) #> Warning: Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #> frequency = 12 observations per 1 year #> Warning: There were 3 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> Warning: There were 3 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.  ts_smooth_es$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 3, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_smooth_es_recipe <-\"                                                                                                                                             #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 3, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Centering and scaling for: recipes::all_numeric_predictors(), ... #> • Sparse, unbalanced variable filter on: recipes::all_predictors(), ... #> • Correlation filter on: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_svm_poly","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"boilerplate function automatically create following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"","code":"ts_auto_svm_poly(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_svm_poly\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_svm_poly","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_smooth_es .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"uses parsnip::svm_poly() sets parsnip::engine kernlab.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_svm_poly","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_auto_poly <- ts_auto_svm_poly(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 3,   .tune = FALSE ) #> Warning: Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #>  Setting default kernel parameters   #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing  ts_auto_poly$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 3, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_svm_poly_recipe <-\"                                                                                                                                              #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 3, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Centering and scaling for: recipes::all_numeric_predictors(), ... #> • Sparse, unbalanced variable filter on: recipes::all_predictors(), ... #> • Correlation filter on: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_svm_rbf","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"boilerplate function automatically create following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"","code":"ts_auto_svm_rbf(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_svm_rbf\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_smooth_es .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"uses parsnip::svm_rb() sets parsnip::engine kernlab.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_svm_rbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_svm_rbf","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_auto_rbf <- ts_auto_svm_rbf(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 3,   .tune = FALSE ) #> Warning: Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #>  Setting default kernel parameters   #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `.nested.col = purrr::map2(...)`. #> Caused by warning: #> ! Column(s) have zero variance so scaling cannot be used: `date_col_day`, `date_col_hour`, `date_col_minute`, `date_col_second`, `date_col_hour12`, `date_col_am.pm`, `date_col_mday`, `date_col_mday7`, `date_col_locale_DE`, `date_col_CH_BerchtoldsDay`, `date_col_JP_BankHolidayJan2`, `date_col_JP_BankHolidayJan3`, `date_col_World_Epiphany`, `date_col_IT_Epiphany`, `date_col_JP_ComingOfAgeDay`, `date_col_JP_SeijinNoHi`, `date_col_US_MLKingsBirthday`, `date_col_US_InaugurationDay`, `date_col_World_PresentationOfLord`, `date_col_JP_KenkokuKinenNoHi`, `date_col_JP_NatFoundationDay`, `date_col_US_LincolnsBirthday`, `date_col_CA_FamilyDay`, `date_col_US_PresidentsDay`, `date_col_US_WashingtonsBirthday`, `date_col_World_Quinquagesima`, `date_col_World_AshWednesday`, `date_col_JP_VernalEquinox`, `date_col_World_Annunciation`, `date_col_World_PalmSunday`, `date_col_World_GoodFriday`, `date_col_US_GoodFriday`, `date_col_CH_Sechselaeuten`, `date_col_World_EasterMonday`, `date_col_IT_LiberationDay`, `date_col_JP_GreeneryDay`, `date_col_JP_MidoriNoHi`, `date_col_JP_ConstitutionDay`, `date_col_JP_KenpouKinenBi`, `date_col_JP_KokuminNoKyujitu`, `date_col_JP_NationHoliday`, `date_col_JP_ChildrensDay`, `date_col_JP_KodomoNoHi`, `date_col_FR_FetDeLaVictoire1945`, `date_col_World_RogationSunday`, `date_col_CA_VictoriaDay`, `date_col_World_Ascension`, `date_col_CH_Ascension`, `date_col_DE_Ascension`, `date_col_FR_Ascension`, `date_col_GB_SpringBankHoliday`, `date_col_US_DecorationMemorialDay`, `date_col_US_MemorialDay`, `date_col_World_PentecostMonday`, `date_col_World_CorpusChristi`, `date_col_DE_CorpusChristi`, `date_col_US_JuneteenthNationalIndependenceDay`, `date_col_US_IndependenceDay`, `date_col_FR_BastilleDay`, `date_col_JP_MarineDay`, `date_col_JP_UmiNoHi`, `date_col_World_TransfigurationOfLord`, `date_col_World_AssumptionOfMary`, `date_col_FR_AssumptionVirginMary`, `date_col_IT_AssumptionOfVirginMary`, `date_col_GB_SummerBankHoliday`, `date_col_World_BirthOfVirginMary`, `date_col_CH_Knabenschiessen`, `date_col_World_CelebrationOfHolyCross`, `date_col_JP_KeirouNOhi`, `date_col_JP_RespectForTheAgedDay`, `date_col_JP_AutumnalEquinox`, `date_col_JP_ShuubunNoHi`, `date_col_World_MassOfArchangels`, `date_col_DE_GermanUnity`, `date_col_CA_ThanksgivingDay`, `date_col_JP_HealthandSportsDay`, `date_col_JP_TaiikuNoHi`, `date_col_US_ColumbusDay`, `date_col_World_AllSouls`, `date_col_JP_BunkaNoHi`, `date_col_JP_NationalCultureDay`, `date_col_US_ElectionDay`, `date_col_World_CaRemembranceDay`, `date_col_FR_ArmisticeDay`, `date_col_US_VeteransDay`, `date_col_World_ChristTheKing`, `date_col_JP_EmperorsBirthday`, `date_col_JP_KinrouKanshaNoHi`, `date_col_JP_TennouTanjyouBi`, `date_col_JP_ThanksgivingDay`, `date_col_US_ThanksgivingDay`, `date_col_World_Advent2nd`, `date_col_IT_StAmrose`, `date_col_IT_ImmaculateConception`, `date_col_World_Advent3rd`, `date_col_World_Advent4th`, `date_col_World_ChristmasEve`, `date_col_DE_ChristmasEve`, `date_col_World_ChristmasDay`, `date_col_US_ChristmasDay`, `date_col_World_BoxingDay`, `date_col_DE_NewYearsEve`, `date_col_JP_BankHolidayDec31`, `date_col_GB_MilleniumDay`, `date_col_month.lbl_13` and `date_col_wday.lbl_8`. Consider using `step_zv()` to remove those columns before normalizing  ts_auto_rbf$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 3, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_svm_rbf_recipe <-\"                                                                                                                                               #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 3, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Dummy variables from: recipes::all_nominal() #> • Centering and scaling for: recipes::all_numeric_predictors(), ... #> • Sparse, unbalanced variable filter on: recipes::all_predictors(), ... #> • Correlation filter on: recipes::all_numeric_predictors() #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_theta","title":"Boilerplate Workflow — ts_auto_theta","text":"boilerplate function create automatically following: recipe model specification workflow calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_theta","text":"","code":"ts_auto_theta(   .data,   .date_col,   .value_col,   .rsamp_obj,   .prefix = \"ts_theta\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_theta","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .rsamp_obj splits object .prefix Default ts_theta .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_theta","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_theta","text":"uses forecast::thetaf() parsnip engine. model use exogenous regressors, univariate model : value ~ date used .date_col .value_col provide.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_theta","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_theta","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_theta <- ts_auto_theta(   .data = data,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits )  ts_theta$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .rsamp_obj = splits) #>  #> $recipe_syntax #> [1] \"ts_theta_recipe <-\"                                                                      #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .rsamp_obj = splits)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Boilerplate Workflow — ts_auto_xgboost","title":"Boilerplate Workflow — ts_auto_xgboost","text":"boilerplate function create automatically following: recipe model specification workflow tuned model (grid ect) calibration tibble plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boilerplate Workflow — ts_auto_xgboost","text":"","code":"ts_auto_xgboost(   .data,   .date_col,   .value_col,   .formula,   .rsamp_obj,   .prefix = \"ts_xgboost\",   .tune = TRUE,   .grid_size = 10,   .num_cores = 1,   .cv_assess = 12,   .cv_skip = 3,   .cv_slice_limit = 6,   .best_metric = \"rmse\",   .bootstrap_final = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boilerplate Workflow — ts_auto_xgboost","text":".data data passed function. time-series object. .date_col column holds datetime. .value_col column value .formula formula passed recipe like value ~ . .rsamp_obj rsample splits object .prefix Default ts_xgboost .tune Defaults TRUE, creates tuning grid tuned model. .grid_size .tune TRUE .grid_size size tuning grid. .num_cores many cores want use. Default 1 .cv_assess many observations assess. See timetk::time_series_cv() .cv_skip many observations skip. See timetk::time_series_cv() .cv_slice_limit many slices return. See timetk::time_series_cv() .best_metric Default \"rmse\". See modeltime::default_forecast_accuracy_metric_set() .bootstrap_final yet implemented.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boilerplate Workflow — ts_auto_xgboost","text":"list","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boilerplate Workflow — ts_auto_xgboost","text":"uses parsnip::boost_tree() engine set xgboost","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boilerplate Workflow — ts_auto_xgboost","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_auto_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boilerplate Workflow — ts_auto_xgboost","text":"","code":"# \\donttest{ library(dplyr) library(timetk) library(modeltime)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_xgboost <- ts_auto_xgboost(   .data = data,   .num_cores = 2,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ .,   .grid_size = 5,   .tune = FALSE )  ts_xgboost$recipe_info #> $recipe_call #> recipe(.data = data, .date_col = date_col, .value_col = value,  #>     .formula = value ~ ., .rsamp_obj = splits, .tune = FALSE,  #>     .grid_size = 5, .num_cores = 2) #>  #> $recipe_syntax #> [1] \"ts_xgboost_recipe <-\"                                                                                                                                               #> [2] \"\\n  recipe(.data = data, .date_col = date_col, .value_col = value, .formula = value ~ \\n    ., .rsamp_obj = splits, .tune = FALSE, .grid_size = 5, .num_cores = 2)\" #>  #> $rec_obj #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:   1 #> predictor: 1 #>  #> ── Operations  #> • Timeseries signature features from: date_col #> • Holiday signature features from: date_col #> • Novel factor level assignment for: recipes::all_nominal_predictors() #> • Variable mutation for: tidyselect::vars_select_helpers$where(is.character) #> • Variables removed: date_col #> • Dummy variables from: recipes::all_nominal() #> • Zero variance filter on: recipes::all_predictors(), -date_col_index.num #>  # }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":null,"dir":"Reference","previous_headings":"","what":"Brownian Motion — ts_brownian_motion","title":"Brownian Motion — ts_brownian_motion","text":"Create Brownian Motion Tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brownian Motion — ts_brownian_motion","text":"","code":"ts_brownian_motion(   .time = 100,   .num_sims = 10,   .delta_time = 1,   .initial_value = 0,   .return_tibble = TRUE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brownian Motion — ts_brownian_motion","text":".time Total time simulation. .num_sims Total number simulations. .delta_time Time step size. .initial_value Integer representing initial value. .return_tibble default TRUE. set FALSE object class matrix returned.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brownian Motion — ts_brownian_motion","text":"tibble/matrix","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brownian Motion — ts_brownian_motion","text":"Brownian Motion, also known Wiener process, continuous-time random process describes random movement particles suspended fluid. named physicist Robert Brown, first described phenomenon 1827. equation Brownian Motion can represented :   W(t) Brownian motion time t, W(0) initial value Brownian motion, sqrt(t) square root time, Z standard normal random variable. Brownian Motion numerous applications, including modeling stock prices financial markets, modeling particle movement fluids, modeling random walk processes general. useful tool probability theory statistical analysis.","code":"W(t) = W(0) + sqrt(t) * Z"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Brownian Motion — ts_brownian_motion","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brownian Motion — ts_brownian_motion","text":"","code":"ts_brownian_motion() #> # A tibble: 1,010 × 3 #>    sim_number        t     y #>    <fct>         <int> <dbl> #>  1 sim_number 1      1     0 #>  2 sim_number 2      1     0 #>  3 sim_number 3      1     0 #>  4 sim_number 4      1     0 #>  5 sim_number 5      1     0 #>  6 sim_number 6      1     0 #>  7 sim_number 7      1     0 #>  8 sim_number 8      1     0 #>  9 sim_number 9      1     0 #> 10 sim_number 10     1     0 #> # ℹ 1,000 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Brownian Motion — ts_brownian_motion_augment","title":"Brownian Motion — ts_brownian_motion_augment","text":"Create Brownian Motion Tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brownian Motion — ts_brownian_motion_augment","text":"","code":"ts_brownian_motion_augment(   .data,   .date_col,   .value_col,   .time = 100,   .num_sims = 10,   .delta_time = NULL )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brownian Motion — ts_brownian_motion_augment","text":".data data.frame/tibble augmented. .date_col column holds date. .value_col value going get augmented. last value column becomes initial value internally. .time many time steps ahead. .num_sims many simulations run. .delta_time Time step size.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brownian Motion — ts_brownian_motion_augment","text":"tibble/matrix","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brownian Motion — ts_brownian_motion_augment","text":"Brownian Motion, also known Wiener process, continuous-time random process describes random movement particles suspended fluid. named physicist Robert Brown, first described phenomenon 1827. equation Brownian Motion can represented :   W(t) Brownian motion time t, W(0) initial value Brownian motion, sqrt(t) square root time, Z standard normal random variable. Brownian Motion numerous applications, including modeling stock prices financial markets, modeling particle movement fluids, modeling random walk processes general. useful tool probability theory statistical analysis.","code":"W(t) = W(0) + sqrt(t) * Z"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Brownian Motion — ts_brownian_motion_augment","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brownian Motion — ts_brownian_motion_augment","text":"","code":"rn <- rnorm(31) df <- data.frame(  date_col = seq.Date(from = as.Date(\"2022-01-01\"),                       to = as.Date(\"2022-01-31\"),                       by = \"day\"),  value = rn )  ts_brownian_motion_augment(   .data = df,   .date_col = date_col,   .value_col = value ) #> # A tibble: 1,041 × 3 #>    sim_number  date_col     value #>    <fct>       <date>       <dbl> #>  1 actual_data 2022-01-01  0.497  #>  2 actual_data 2022-01-02 -1.43   #>  3 actual_data 2022-01-03  0.643  #>  4 actual_data 2022-01-04  2.00   #>  5 actual_data 2022-01-05  0.0101 #>  6 actual_data 2022-01-06  1.93   #>  7 actual_data 2022-01-07  0.103  #>  8 actual_data 2022-01-08  0.689  #>  9 actual_data 2022-01-09  0.360  #> 10 actual_data 2022-01-10  0.910  #> # ℹ 1,031 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"Plot augmented Geometric/Brownian Motion.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"","code":"ts_brownian_motion_plot(.data, .date_col, .value_col, .interactive = FALSE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":".data data going pass function augment. .date_col column holds date .value_col column holds value .interactive default FALSE, TRUE produce interactive plotly plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"ggplot2 object interactive plotly plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"function take output either ts_brownian_motion_augment() ts_geometric_brownian_motion_augment() function plot . legend set \"none\" simulation count higher 9.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto-Plot a Geometric/Brownian Motion Augment — ts_brownian_motion_plot","text":"","code":"library(dplyr)  df <- ts_to_tbl(AirPassengers) %>% select(-index)  augmented_data <- df %>%   ts_brownian_motion_augment(     .date_col = date_col,     .value_col = value,     .time = 144   )   augmented_data %>%    ts_brownian_motion_plot(.date_col = date_col, .value_col = value)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"Takes data aggregated day level makes calendar heatmap.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"","code":"ts_calendar_heatmap_plot(   .data,   .date_col,   .value_col,   .low = \"red\",   .high = \"green\",   .plt_title = \"\",   .interactive = TRUE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":".data time-series data date column value column. .date_col column datetime values .value_col column values .low color low value, must quoted like \"red\". default \"red\" .high color high value, must quoted like \"green\". default \"green\" .plt_title title plot .interactive Default TRUE get interactive plot using plotly::ggplotly(). can set FALSE get ggplot plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"ggplot2 plot interactive plotly plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"data provided must aggregated day level, funky output result possible nothing output errors. must date column value column, items required function work. function intentionally inflexible, complains less order force user supply clean data-set.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Calendar Heatmap — ts_calendar_heatmap_plot","text":"","code":"data_tbl <- data.frame(   date_col = seq.Date(     from = as.Date(\"2020-01-01\"),     to   = as.Date(\"2022-06-01\"),     length.out = 365*2 + 180     ),   value = rnorm(365*2+180, mean = 100) )  ts_calendar_heatmap_plot(   .data          = data_tbl   , .date_col    = date_col   , .value_col   = value   , .interactive = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare data over time periods — ts_compare_data","title":"Compare data over time periods — ts_compare_data","text":"Given tibble/data.frame, can get date two different comparative date ranges. Lets say want compare visits one year visits 2 years without also seeing previous 1 year. can function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare data over time periods — ts_compare_data","text":"","code":"ts_compare_data(.data, .date_col, .start_date, .end_date, .periods_back)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare data over time periods — ts_compare_data","text":".data date.frame/tibble holds data .date_col column date value .start_date start period want analyze .end_date end period want analyze .periods_back long ago want compare data . Time units collapsed using lubridate::floor_date(). value can : second minute hour day week month bimonth quarter season halfyear year Arbitrary unique English abbreviations lubridate::period() constructor allowed.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare data over time periods — ts_compare_data","text":"tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare data over time periods — ts_compare_data","text":"Uses timetk::filter_by_time() function order filter date column. Uses timetk::subtract_time() function subtract time start date.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare data over time periods — ts_compare_data","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_compare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare data over time periods — ts_compare_data","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(timetk))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  ts_compare_data(   .data           = data_tbl   , .date_col     = date_col   , .start_date   = \"1955-01-01\"   , .end_date     = \"1955-12-31\"   , .periods_back = \"2 years\"   ) %>%   summarise_by_time(     .date_var = date_col     , .by     = \"year\"     , visits  = sum(value)   ) #> # A tibble: 2 × 2 #>   date_col   visits #>   <date>      <dbl> #> 1 1953-01-01   2700 #> 2 1955-01-01   3408"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Event Analysis Plot — ts_event_analysis_plot","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"Plot data ts_time_event_analysis_tbl() function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"","code":"ts_event_analysis_plot(   .data,   .plot_type = \"mean\",   .plot_ci = TRUE,   .interactive = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":".data data comes ts_time_event_analysis_tbl() .plot_type default \"mean\" show mean event change output analysis tibble. possible values : mean, median, individual. .plot_ci default TRUE. work choose one aggregate plots either \"mean\" \"median\" .interactive default FALSE. TRUE return plotly plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"ggplot2 object","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"function take data strictly ts_time_event_analysis_tbl() plot data. can choose type plot want parameter .plot_type. give choice \"mean\", \"median\", \"individual\". can also plot upper lower confidence intervals choose one aggregate plots (\"mean\"/\"median\").","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_event_analysis_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Event Analysis Plot — ts_event_analysis_plot","text":"","code":"library(dplyr) df <- ts_to_tbl(AirPassengers) %>% select(-index)  ts_time_event_analysis_tbl(   .data = df,   .horizon = 6,   .date_col = date_col,   .value_col = value,   .direction = \"both\" ) %>%   ts_event_analysis_plot()   ts_time_event_analysis_tbl(   .data = df,   .horizon = 6,   .date_col = date_col,   .value_col = value,   .direction = \"both\" ) %>%   ts_event_analysis_plot(.plot_type = \"individual\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"Extract fitted workflow ts_auto_ function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"","code":"ts_extract_auto_fitted_workflow(.input)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":".input output list object ts_auto_ function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"fitted workflow object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"Extract fitted workflow ts_auto_ function. work functions designated Boilerplate.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_extract_auto_fitted_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Boilerplate Items — ts_extract_auto_fitted_workflow","text":"","code":"if (FALSE) { library(dplyr)  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(   data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  ts_lm <- ts_auto_lm(   .data = data,   .date_col = date_col,   .value_col = value,   .rsamp_obj = splits,   .formula = value ~ ., )  ts_extract_auto_fitted_workflow(ts_lm) }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Feature Clustering — ts_feature_cluster","title":"Time Series Feature Clustering — ts_feature_cluster","text":"function returns output list data plots come using K-Means clustering algorithm time series data.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Feature Clustering — ts_feature_cluster","text":"","code":"ts_feature_cluster(   .data,   .date_col,   .value_col,   ...,   .features = c(\"frequency\", \"entropy\", \"acf_features\"),   .scale = TRUE,   .prefix = \"ts_\",   .centers = 3 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Feature Clustering — ts_feature_cluster","text":".data data passed must data.frame/tibble . .date_col date column. .value_col column holds value time series want features clustering performed . ... can place grouping variables passed dplyr::group_by() .features quoted string vector using c() features like pass. can pass feature make tsfeatures package. .scale TRUE, time series scaled mean 0 sd 1 features computed .prefix prefix prefix feature columns. Default: \"ts_\" .centers integer many different centers like generate. default 3.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Feature Clustering — ts_feature_cluster","text":"list output","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Feature Clustering — ts_feature_cluster","text":"function return list object output. function requires time series tibble/data.frame get passed , along .date_col, .value_col period data. uses underlying function timetk::tk_tsfeatures() takes output performs clustering analysis using K-Means algorithm. function parameter .features can take features listed tsfeatures package Rob Hyndman. can also create custom functions .GlobalEnviron take quoted arguments. can make function follows my_mean <- function(x){return(mean(x, na.rm = TRUE))} can call using .features = c(\"my_mean\"). output function includes following: Data Section ts_feature_tbl user_item_matrix_tbl mapped_tbl scree_data_tbl input_data_tbl (original data) Plots static_plot plotly_plot","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Feature Clustering — ts_feature_cluster","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Feature Clustering — ts_feature_cluster","text":"","code":"library(dplyr)  data_tbl <- ts_to_tbl(AirPassengers) %>%   mutate(group_id = rep(1:12, 12))  ts_feature_cluster(   .data = data_tbl,   .date_col = date_col,   .value_col = value,   group_id,   .features = c(\"acf_features\",\"entropy\"),   .scale = TRUE,   .prefix = \"ts_\",   .centers = 3 ) #> $data #> $data$ts_feature_tbl #> # A tibble: 12 × 8 #>    group_id ts_x_acf1 ts_x_acf10 ts_diff1_acf1 ts_diff1_acf10 ts_diff2_acf1 #>       <int>     <dbl>      <dbl>         <dbl>          <dbl>         <dbl> #>  1        1     0.741       1.55       -0.0995          0.474       -0.182  #>  2        2     0.730       1.50       -0.0155          0.654       -0.147  #>  3        3     0.766       1.62       -0.471           0.562       -0.620  #>  4        4     0.715       1.46       -0.253           0.457       -0.555  #>  5        5     0.730       1.48       -0.372           0.417       -0.649  #>  6        6     0.751       1.61        0.122           0.646        0.0506 #>  7        7     0.745       1.58        0.260           0.236       -0.303  #>  8        8     0.761       1.60        0.319           0.419       -0.319  #>  9        9     0.747       1.59       -0.235           0.191       -0.650  #> 10       10     0.732       1.50       -0.0371          0.269       -0.510  #> 11       11     0.746       1.54       -0.310           0.357       -0.556  #> 12       12     0.735       1.51       -0.360           0.294       -0.601  #> # ℹ 2 more variables: ts_seas_acf1 <dbl>, ts_entropy <dbl> #>  #> $data$user_item_matrix_tbl #> # A tibble: 12 × 8 #>    group_id ts_x_acf1 ts_x_acf10 ts_diff1_acf1 ts_diff1_acf10 ts_diff2_acf1 #>       <int>     <dbl>      <dbl>         <dbl>          <dbl>         <dbl> #>  1        1     0.741       1.55       -0.0995          0.474       -0.182  #>  2        2     0.730       1.50       -0.0155          0.654       -0.147  #>  3        3     0.766       1.62       -0.471           0.562       -0.620  #>  4        4     0.715       1.46       -0.253           0.457       -0.555  #>  5        5     0.730       1.48       -0.372           0.417       -0.649  #>  6        6     0.751       1.61        0.122           0.646        0.0506 #>  7        7     0.745       1.58        0.260           0.236       -0.303  #>  8        8     0.761       1.60        0.319           0.419       -0.319  #>  9        9     0.747       1.59       -0.235           0.191       -0.650  #> 10       10     0.732       1.50       -0.0371          0.269       -0.510  #> 11       11     0.746       1.54       -0.310           0.357       -0.556  #> 12       12     0.735       1.51       -0.360           0.294       -0.601  #> # ℹ 2 more variables: ts_seas_acf1 <dbl>, ts_entropy <dbl> #>  #> $data$mapped_tbl #> # A tibble: 3 × 3 #>   centers k_means  glance           #>     <int> <list>   <list>           #> 1       1 <kmeans> <tibble [1 × 4]> #> 2       2 <kmeans> <tibble [1 × 4]> #> 3       3 <kmeans> <tibble [1 × 4]> #>  #> $data$scree_data_tbl #> # A tibble: 3 × 2 #>   centers tot.withinss #>     <int>        <dbl> #> 1       1        1.83  #> 2       2        0.736 #> 3       3        0.457 #>  #> $data$input_data_tbl #> # A tibble: 144 × 4 #>    index     date_col   value group_id #>    <yearmon> <date>     <dbl>    <int> #>  1 Jan 1949  1949-01-01   112        1 #>  2 Feb 1949  1949-02-01   118        2 #>  3 Mar 1949  1949-03-01   132        3 #>  4 Apr 1949  1949-04-01   129        4 #>  5 May 1949  1949-05-01   121        5 #>  6 Jun 1949  1949-06-01   135        6 #>  7 Jul 1949  1949-07-01   148        7 #>  8 Aug 1949  1949-08-01   148        8 #>  9 Sep 1949  1949-09-01   136        9 #> 10 Oct 1949  1949-10-01   119       10 #> # ℹ 134 more rows #>  #>  #> $plots #> $plots$static_plot  #>  #> $plots$plotly_plot #>  #>  #> attr(,\"output_type\") #> [1] \"ts_feature_cluster\""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Feature Clustering — ts_feature_cluster_plot","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"function returns output list data plots come using K-Means clustering algorithm time series data.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"","code":"ts_feature_cluster_plot(   .data,   .date_col,   .value_col,   ...,   .center = 3,   .facet_ncol = 3,   .smooth = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":".data data passed must output ts_feature_cluster() function. .date_col date column. .value_col column holds value time series featurs built . ... can place grouping variables passed dplyr::group_by() .center integer chosen amount centers ts_feature_cluster() function. .facet_ncol passed timetk::plot_time_series() function. .smooth passed timetk::plot_time_series() function set default FALSE.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"list output","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"function return list object output. function requires ts_feature_cluster() passed look specific attribute internally. output function includes following: Data Section original_data kmm_data_tbl user_item_tbl cluster_tbl Plots static_plot plotly_plot K-Means Object k-means object","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_feature_cluster_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Feature Clustering — ts_feature_cluster_plot","text":"","code":"library(dplyr)  data_tbl <- ts_to_tbl(AirPassengers) %>%   mutate(group_id = rep(1:12, 12))  output <- ts_feature_cluster(   .data = data_tbl,   .date_col = date_col,   .value_col = value,   group_id,   .features = c(\"acf_features\",\"entropy\"),   .scale = TRUE,   .prefix = \"ts_\",   .centers = 3 )  ts_feature_cluster_plot(   .data = output,   .date_col = date_col,   .value_col = value,   .center = 2,   group_id ) #> Joining with `by = join_by(group_id)`"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-series Forecasting Simulator — ts_forecast_simulator","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"Creating different forecast paths forecast objects (applicable), utilizing underlying model distribution simulate function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"","code":"ts_forecast_simulator(   .model,   .data,   .ext_reg = NULL,   .frequency = NULL,   .bootstrap = TRUE,   .horizon = 4,   .iterations = 25,   .sim_color = \"steelblue\",   .alpha = 0.05 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":".model forecasting model one following forecast package: Arima auto.arima ets nnetar Arima() xreg .data data used .model parameter. used timetk::tk_index() .ext_reg tibble matrix future xregs length horizon want forecast. .frequency conversion internal table match time frequency data. .bootstrap boolean value TRUE/FALSE. forecast::simulate.Arima() simulation using resampled errors rather normally distributed errors. .horizon integer defining forecast horizon. .iterations integer, set number iterations simulation. .sim_color Set color simulation paths lines. .alpha Set opacity level simulation path lines.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"original time series, simulated values plots","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"function expects take model either Arima, auto.arima, ets nnetar forecast package. can supply forecasting horizon, iterations items. may also specify Arima() model using xregs.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-series Forecasting Simulator — ts_forecast_simulator","text":"","code":"suppressPackageStartupMessages(library(forecast)) suppressPackageStartupMessages(library(dplyr))  # Create a model fit <- auto.arima(AirPassengers) data_tbl <- ts_to_tbl(AirPassengers)  # Simulate 50 possible forecast paths, with .horizon of 12 months output <- ts_forecast_simulator(   .model        = fit   , .horizon    = 12   , .iterations = 50   , .data       = data_tbl )  output$ggplot"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric Brownian Motion — ts_geometric_brownian_motion","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"Create Geometric Brownian Motion.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"","code":"ts_geometric_brownian_motion(   .num_sims = 100,   .time = 25,   .mean = 0,   .sigma = 0.1,   .initial_value = 100,   .delta_time = 1/365,   .return_tibble = TRUE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":".num_sims Total number simulations. .time Total time simulation. .mean Expected return .sigma Volatility .initial_value Integer representing initial value. .delta_time Time step size. .return_tibble default TRUE. set FALSE object class matrix returned.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"tibble/matrix","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"Geometric Brownian Motion (GBM) statistical method modeling evolution given financial asset time. type stochastic process, means system undergoes random changes time. GBM widely used field finance model behavior stock prices, foreign exchange rates, financial assets. based assumption asset's price follows random walk, meaning influenced number unpredictable factors market trends, news events, investor sentiment. equation GBM :   S price asset, t time, m expected return asset, s volatility asset, dW small random change asset's price. GBM can used estimate likelihood different outcomes given asset, often used conjunction statistical methods make accurate predictions future performance asset. function provides ability simulating estimating parameters GBM process. can used analyze behavior financial assets make informed investment decisions.","code":"dS/S = mdt + sdW"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric Brownian Motion — ts_geometric_brownian_motion","text":"","code":"ts_geometric_brownian_motion() #> # A tibble: 2,600 × 3 #>    sim_number        t     y #>    <fct>         <int> <dbl> #>  1 sim_number 1      1   100 #>  2 sim_number 2      1   100 #>  3 sim_number 3      1   100 #>  4 sim_number 4      1   100 #>  5 sim_number 5      1   100 #>  6 sim_number 6      1   100 #>  7 sim_number 7      1   100 #>  8 sim_number 8      1   100 #>  9 sim_number 9      1   100 #> 10 sim_number 10     1   100 #> # ℹ 2,590 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"Create Geometric Brownian Motion.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"","code":"ts_geometric_brownian_motion_augment(   .data,   .date_col,   .value_col,   .num_sims = 10,   .time = 25,   .mean = 0,   .sigma = 0.1,   .delta_time = 1/365 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":".data data going pass function augment. .date_col column holds date .value_col column holds value .num_sims Total number simulations. .time Total time simulation. .mean Expected return .sigma Volatility .delta_time Time step size.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"tibble/matrix","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"Geometric Brownian Motion (GBM) statistical method modeling evolution given financial asset time. type stochastic process, means system undergoes random changes time. GBM widely used field finance model behavior stock prices, foreign exchange rates, financial assets. based assumption asset's price follows random walk, meaning influenced number unpredictable factors market trends, news events, investor sentiment. equation GBM :   S price asset, t time, m expected return asset, s volatility asset, dW small random change asset's price. GBM can used estimate likelihood different outcomes given asset, often used conjunction statistical methods make accurate predictions future performance asset. function provides ability simulating estimating parameters GBM process. can used analyze behavior financial assets make informed investment decisions.","code":"dS/S = mdt + sdW"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric Brownian Motion — ts_geometric_brownian_motion_augment","text":"","code":"rn <- rnorm(31) df <- data.frame(  date_col = seq.Date(from = as.Date(\"2022-01-01\"),                       to = as.Date(\"2022-01-31\"),                       by = \"day\"),  value = rn )  ts_geometric_brownian_motion_augment(   .data = df,   .date_col = date_col,   .value_col = value ) #> # A tibble: 291 × 3 #>    sim_number  date_col     value #>    <fct>       <date>       <dbl> #>  1 actual_data 2022-01-01 -1.46   #>  2 actual_data 2022-01-02 -0.335  #>  3 actual_data 2022-01-03 -1.89   #>  4 actual_data 2022-01-04  1.10   #>  5 actual_data 2022-01-05 -0.950  #>  6 actual_data 2022-01-06  0.595  #>  7 actual_data 2022-01-07 -0.299  #>  8 actual_data 2022-01-08 -0.0139 #>  9 actual_data 2022-01-09  0.415  #> 10 actual_data 2022-01-10  2.75   #> # ℹ 281 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get date or datetime variables (column names) — ts_get_date_columns","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"Get date datetime variables (column names)","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"","code":"ts_get_date_columns(.data)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":".data object class data.frame","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"vector containing column names date/date-like classes.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"ts_get_date_columns returns column names date datetime variables data frame.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_get_date_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get date or datetime variables (column names) — ts_get_date_columns","text":"","code":"ts_to_tbl(AirPassengers) %>%   ts_get_date_columns() #> [1] \"index\"    \"date_col\""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":"function used augment data frame tibble time series growth rates selected columns. can provide data frame tibble first argument, column(s) want calculate growth rates using .value parameter, optionally specify custom names new columns using .names parameter.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":"","code":"ts_growth_rate_augment(.data, .value, .names = \"auto\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":".data data frame tibble containing data augmented. .value quosure specifying column(s) want calculate growth rates. .names Optional. character vector specifying names new columns created. Use \"auto\" automatic naming.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":"tibble includes original data additional columns representing growth rates selected columns. column names either automatically generated specified .names parameter.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment Data with Time Series Growth Rates — ts_growth_rate_augment","text":"","code":"data <- data.frame(   Year = 1:5,   Income = c(100, 120, 150, 180, 200),   Expenses = c(50, 60, 75, 90, 100) ) ts_growth_rate_augment(data, .value = c(Income, Expenses)) #> # A tibble: 5 × 5 #>    Year Income Expenses growth_rate_Income growth_rate_Expenses #>   <int>  <dbl>    <dbl>              <dbl>                <dbl> #> 1     1    100       50               NA                   NA   #> 2     2    120       60               20                   20   #> 3     3    150       75               25                   25   #> 4     4    180       90               20                   20   #> 5     5    200      100               11.1                 11.1"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"function computes growth rate numeric vector, typically representing time series, optional transformations like scaling, power, lag differences.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"","code":"ts_growth_rate_vec(.x, .scale = 100, .power = 1, .log_diff = FALSE, .lags = 1)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":".x numeric vector .scale numeric value used scale output .power numeric value used raise output power .log_diff logical value determines whether output log difference .lags integer determines number lags use","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"list object workflows.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"function calculates growth rates time series, allowing scaling, exponentiation, lag differences. can useful financial data analysis, among applications. growth rate computed follows: lags positive log_diff FALSE: growth_rate = (((x / lag(x, lags))^power) - 1) * scale lags positive log_diff TRUE: growth_rate = log(x / lag(x, lags)) * scale lags negative log_diff FALSE: growth_rate = (((x / lead(x, -lags))^power) - 1) * scale lags negative log_diff TRUE: growth_rate = log(x / lead(x, -lags)) * scale","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_growth_rate_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Function Time Series Growth Rate — ts_growth_rate_vec","text":"","code":"# Calculate the growth rate of a time series without any transformations. ts_growth_rate_vec(c(100, 110, 120, 130)) #> [1]        NA 10.000000  9.090909  8.333333 #> attr(,\"name\") #> [1] \"c(100, 110, 120, 130)\"  # Calculate the growth rate with scaling and a power transformation. ts_growth_rate_vec(c(100, 110, 120, 130), .scale = 10, .power = 2) #> [1]       NA 2.100000 1.900826 1.736111 #> attr(,\"name\") #> [1] \"c(100, 110, 120, 130)\"  # Calculate the log differences of a time series with lags. ts_growth_rate_vec(c(100, 110, 120, 130), .log_diff = TRUE, .lags = -1) #> [1] -9.531018 -8.701138 -8.004271        NA #> attr(,\"name\") #> [1] \"c(100, 110, 120, 130)\"  # Plot plot.ts(AirPassengers)  plot.ts(ts_growth_rate_vec(AirPassengers))"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Series Information — ts_info_tbl","title":"Get Time Series Information — ts_info_tbl","text":"function take data set return tibble useful information.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Series Information — ts_info_tbl","text":"","code":"ts_info_tbl(.data, .date_col)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Series Information — ts_info_tbl","text":".data data passing function .date_col needed passing tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Series Information — ts_info_tbl","text":"tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Time Series Information — ts_info_tbl","text":"function can accept objects following classes: ts xts mts zoo tibble/data.frame function return following pieces information tibble: name class frequency start end var length","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Time Series Information — ts_info_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_info_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Series Information — ts_info_tbl","text":"","code":"ts_info_tbl(AirPassengers) #> # A tibble: 1 × 7 #>   name          class frequency start  end     var        length #>   <chr>         <chr>     <dbl> <chr>  <chr>   <chr>       <int> #> 1 AirPassengers ts           12 1949 1 1960 12 univariate    144 ts_info_tbl(BJsales) #> # A tibble: 1 × 7 #>   name    class frequency start end   var        length #>   <chr>   <chr>     <dbl> <chr> <chr> <chr>       <int> #> 1 BJsales ts            1 1 1   150 1 univariate    150"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_is_date_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a date class — ts_is_date_class","title":"Check if an object is a date class — ts_is_date_class","text":"Check object date class","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_is_date_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a date class — ts_is_date_class","text":"","code":"ts_is_date_class(.x)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_is_date_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a date class — ts_is_date_class","text":".x vector check","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_is_date_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a date class — ts_is_date_class","text":"Logical (TRUE/FALSE)","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_is_date_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a date class — ts_is_date_class","text":"","code":"seq.Date(from = as.Date(\"2022-01-01\"), by = \"day\", length.out = 10) %>% ts_is_date_class() #> [1] TRUE  letters %>% ts_is_date_class() #> [1] FALSE"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Lag Correlation Analysis — ts_lag_correlation","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"function outputs list object data plots. data output following: lag_list lag_tbl correlation_lag_matrix correlation_lag_tbl plots output following: lag_plot plotly_lag_plot correlation_heatmap plotly_heatmap","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"","code":"ts_lag_correlation(   .data,   .date_col,   .value_col,   .lags = 1,   .heatmap_color_low = \"white\",   .heatmap_color_hi = \"steelblue\" )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":".data tibble time series data .date_col date column .value_col value column analyzed .lags vector integer lags, ie 1 c(1,6,12) .heatmap_color_low color low values heatmap correlation matrix , default 'white' .heatmap_color_hi color low values heatmap correlation matrix , default 'steelblue'","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"list object","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"function takes time series data form tibble outputs list object data plots. function take argument '.lags' get lags data, outputting correlation matrix, heatmap lag plot among things input data.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Lag Correlation Analysis — ts_lag_correlation","text":"","code":"library(dplyr)  df <- ts_to_tbl(AirPassengers) %>% select(-index) lags <- c(1,3,6,12)  output <- ts_lag_correlation(   .data = df,   .date_col = date_col,   .value_col = value,   .lags = lags )  output$data$correlation_lag_matrix #>                 value value_lag1 value_lag3 value_lag6 value_lag12 #> value       1.0000000  0.9542938  0.8186636  0.7657001   0.9905274 #> value_lag1  0.9542938  1.0000000  0.8828054  0.7726530   0.9492382 #> value_lag3  0.8186636  0.8828054  1.0000000  0.8349550   0.8218493 #> value_lag6  0.7657001  0.7726530  0.8349550  1.0000000   0.7780911 #> value_lag12 0.9905274  0.9492382  0.8218493  0.7780911   1.0000000 output$plots$lag_plot"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Moving Average Plot — ts_ma_plot","title":"Time Series Moving Average Plot — ts_ma_plot","text":"function produce two plots. moving average plots. One plots xts::plot.xts() ggplot2 plot. done user can choose type best . plots stacked graph top .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Moving Average Plot — ts_ma_plot","text":"","code":"ts_ma_plot(   .data,   .date_col,   .value_col,   .ts_frequency = \"monthly\",   .main_title = NULL,   .secondary_title = NULL,   .tertiary_title = NULL )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Moving Average Plot — ts_ma_plot","text":".data data want visualize. pre-processed aggregation match .frequency argument. .date_col data column .data argument. .value_col value column .data argument .ts_frequency frequency aggregation, quoted, ie. \"monthly\", anything else default weekly, important data passed function either weekly monthly aggregation. .main_title title main plot. .secondary_title title second plot. .tertiary_title title third plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Moving Average Plot — ts_ma_plot","text":"time series data sets two plots.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Moving Average Plot — ts_ma_plot","text":"function expects take data.frame/tibble. return list object good idea save output variable extract .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Moving Average Plot — ts_ma_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Moving Average Plot — ts_ma_plot","text":"","code":"suppressPackageStartupMessages(library(dplyr))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  output <- ts_ma_plot(   .data = data_tbl,   .date_col = date_col,   .value_col = value ) #> Warning: Non-numeric columns being dropped: date_col #> Warning: Non-numeric columns being dropped: date_col #> Warning: Non-numeric columns being dropped: date_col #> Warning: Removed 11 rows containing missing values (`geom_line()`).  output$pgrid  output$xts_plt  output$data_summary_tbl %>% head() #> # A tibble: 6 × 5 #>   date_col   value  ma12 diff_a diff_b #>   <date>     <dbl> <dbl>  <dbl>  <dbl> #> 1 1949-01-01   112    NA   0         0 #> 2 1949-02-01   118    NA   5.36      0 #> 3 1949-03-01   132    NA  11.9       0 #> 4 1949-04-01   129    NA  -2.27      0 #> 5 1949-05-01   121    NA  -6.20      0 #> 6 1949-06-01   135    NA  11.6       0  output <- ts_ma_plot(   .data = data_tbl,   .date_col = date_col,   .value_col = value,   .ts_frequency = \"week\" ) #> Warning: Non-numeric columns being dropped: date_col #> Warning: Non-numeric columns being dropped: date_col #> Warning: Non-numeric columns being dropped: date_col #> Warning: Removed 51 rows containing missing values (`geom_line()`).  output$pgrid  output$xts_plt  output$data_summary_tbl %>% head() #> # A tibble: 6 × 5 #>   date_col   value  ma12 diff_a diff_b #>   <date>     <dbl> <dbl>  <dbl>  <dbl> #> 1 1949-01-01   112    NA   0         0 #> 2 1949-02-01   118    NA   5.36      0 #> 3 1949-03-01   132    NA  11.9       0 #> 4 1949-04-01   129    NA  -2.27      0 #> 5 1949-05-01   121    NA  -6.20      0 #> 6 1949-06-01   135    NA  11.6       0"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Model Tuner — ts_model_auto_tune","title":"Time Series Model Tuner — ts_model_auto_tune","text":"function create tuned model. uses ts_model_spec_tune_template() hood get generic template used grid search.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Model Tuner — ts_model_auto_tune","text":"","code":"ts_model_auto_tune(   .modeltime_model_id,   .calibration_tbl,   .splits_obj,   .drop_training_na = TRUE,   .date_col,   .value_col,   .tscv_assess = \"12 months\",   .tscv_skip = \"6 months\",   .slice_limit = 6,   .facet_ncol = 2,   .grid_size = 30,   .num_cores = 1,   .best_metric = \"rmse\" )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Model Tuner — ts_model_auto_tune","text":".modeltime_model_id .model_id calibrated modeltime table. .calibration_tbl calibrated modeltime table. .splits_obj time_series_split object. .drop_training_na boolean drop NA values training(splits) data .date_col column holds date values. .value_col column holds time series values. .tscv_assess character expression like \"12 months\". gets passed timetk::time_series_cv() .tscv_skip character expression like \"6 months\". gets passed timetk::time_series_cv() .slice_limit integer gets passed timetk::time_series_cv() .facet_ncol number faceted columns passed plot_time_series_cv_plan .grid_size integer gets passed dials::grid_latin_hypercube() function. .num_cores default 1, can set integer value long equal less available cores machine. .best_metric default \"rmse\" can set default dials metric. must passed character.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Model Tuner — ts_model_auto_tune","text":"list object multiple items.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Model Tuner — ts_model_auto_tune","text":"function can work following parsnip/modeltime engines: \"auto_arima\" \"auto_arima_xgboost\" \"ets\" \"croston\" \"theta\" \"stlm_ets\" \"tbats\" \"stlm_arima\" \"nnetar\" \"prophet\" \"prophet_xgboost\" \"lm\" \"glmnet\" \"stan\" \"spark\" \"keras\" \"earth\" \"xgboost\" \"kernlab\" function returns list object several items inside . three categories items inside list. data model_info plots data section following items: calibration_tbl calibration data passed function. calibration_tuned_tbl calibration tibble used tuned workflow. tscv_data_tbl tibble time series cross validation. tuned_results tuning results tibble slices time series cross validation. best_tuned_results_tbl tibble parameters best test set chosen metric. tscv_obj actual time series cross validation object returned timetk::time_series_cv() model_info section following items: model_spec original modeltime/parsnip model specification. model_spec_engine engine used model specification. model_spec_tuner tuning model template returned ts_model_spec_tune_template() plucked_model model plucked calibration tibble tuning. wflw_tune_spec new workflow model_spec_tuner attached. grid_spec grid search specification tuning process. tuned_tscv_wflw_spec final tuned model workflow model finalized. model want pull going work . plots section following items: tune_results_plt static ggplot grid search. tscv_pl time series cross validation plan plot.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Model Tuner — ts_model_auto_tune","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_auto_tune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Model Tuner — ts_model_auto_tune","text":"","code":"if (FALSE) { suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr))  data <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(     data     , date_col     , assess = 12     , skip = 3     , cumulative = TRUE )  rec_objs <- ts_auto_recipe(   .data = data   , .date_col = date_col   , .pred_col = value )  wfsets <- ts_wfs_mars(   .model_type = \"earth\"   , .recipe_list = rec_objs )  wf_fits <- wfsets %>%   modeltime_fit_workflowset(     data = training(splits)     , control = control_fit_workflowset(      allow_par = TRUE      , verbose = TRUE     )   )  models_tbl <- wf_fits %>%   filter(.model != \"NULL\")  calibration_tbl <- models_tbl %>%   modeltime_calibrate(new_data = testing(splits))  output <- ts_model_auto_tune(   .modeltime_model_id = 1,   .calibration_tbl = calibration_tbl,   .splits_obj = splits,   .drop_training_na = TRUE,   .date_col = date_col,   .value_col = value,   .tscv_assess = \"12 months\",   .tscv_skip = \"3 months\",   .num_cores = parallel::detectCores() - 1 ) }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Time Series Models — ts_model_compare","title":"Compare Two Time Series Models — ts_model_compare","text":"function expect take two models used comparison. useful use appropriately following modeltime workflow getting two models compare. extension calibrate plot, takes two models likely better suited used running model ts_model_auto_tune() function see difference performance base model tuned.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Time Series Models — ts_model_compare","text":"","code":"ts_model_compare(   .model_1,   .model_2,   .type = \"testing\",   .splits_obj,   .data,   .print_info = TRUE,   .metric = \"rmse\" )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Time Series Models — ts_model_compare","text":".model_1 model compared base, can also hyperparameter tuned model. .model_2 base model. .type default testing tibble, can set training well. .splits_obj splits object .data original data passed splits .print_info boolean, default TRUE .metric one following character strings: \"mae\" \"mape\" \"mase\" \"smape\" \"rmse\" \"rsq\"","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Time Series Models — ts_model_compare","text":"function outputs list invisibly.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Two Time Series Models — ts_model_compare","text":"function expects take two models. must tell assessing training testing data, testing data default. must therefore supply splits object function along origianl dataset. must also tell default modeltime accuracy metric printed graph . can also tell function print information console . static ggplot2 polot interactive plotly plot returned inside output list.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare Two Time Series Models — ts_model_compare","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Time Series Models — ts_model_compare","text":"","code":"if (FALSE) { suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(rsample)) suppressPackageStartupMessages(library(dplyr))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(   data       = data_tbl,   date_var   = date_col,   assess     = \"12 months\",   cumulative = TRUE )  rec_obj <- ts_auto_recipe(  .data     = data_tbl,  .date_col = date_col,  .pred_col = value )  wfs_mars <- ts_wfs_mars(.recipe_list = rec_obj)  wf_fits <- wfs_mars %>%   modeltime_fit_workflowset(     data = training(splits)     , control = control_fit_workflowset(          allow_par = FALSE          , verbose = TRUE        )  )  calibration_tbl <- wf_fits %>%     modeltime_calibrate(new_data = testing(splits))  base_mars <- calibration_tbl %>% pluck_modeltime_model(1) date_mars <- calibration_tbl %>% pluck_modeltime_model(2)  ts_model_compare(  .model_1    = base_mars,  .model_2    = date_mars,  .type       = \"testing\",  .splits_obj = splits,  .data       = data_tbl,  .print_info = TRUE,  .metric     = \"rmse\"  )$plots$static_plot }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Rank — ts_model_rank_tbl","title":"Model Rank — ts_model_rank_tbl","text":"takes calibration tibble computes ranks models inside .","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Rank — ts_model_rank_tbl","text":"","code":"ts_model_rank_tbl(.calibration_tbl)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Rank — ts_model_rank_tbl","text":".calibration_tbl calibrated modeltime table.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Rank — ts_model_rank_tbl","text":"tibble models ranked metric performance order","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Rank — ts_model_rank_tbl","text":"takes calibration tibble computes ranks models inside . computes now default yardstick metrics modeltime following using dplyr min_rank() function desc use rsq: \"rmse\" \"mae\" \"mape\" \"smape\" \"rsq\"","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Rank — ts_model_rank_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_rank_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Rank — ts_model_rank_tbl","text":"","code":"# NOT RUN if (FALSE) { suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(rsample)) suppressPackageStartupMessages(library(workflows)) suppressPackageStartupMessages(library(parsnip)) suppressPackageStartupMessages(library(recipes))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(   data_tbl,   date_var = date_col,   assess = \"12 months\",   cumulative = TRUE )  rec_obj <- recipe(value ~ ., training(splits))  model_spec_arima <- arima_reg() %>%   set_engine(engine = \"auto_arima\")  model_spec_mars <- mars(mode = \"regression\") %>%   set_engine(\"earth\")  wflw_fit_arima <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_arima) %>%   fit(training(splits))  wflw_fit_mars <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_mars) %>%   fit(training(splits))  model_tbl <- modeltime_table(wflw_fit_arima, wflw_fit_mars)  calibration_tbl <- model_tbl %>%   modeltime_calibrate(new_data = testing(splits))  ts_model_rank_tbl(calibration_tbl)  }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Model Spec Template — ts_model_spec_tune_template","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"function create generic tuneable model specification, function can used called internally ts_model_auto_tune().","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"","code":"ts_model_spec_tune_template(.parsnip_engine = NULL, .model_spec_class = NULL)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":".parsnip_engine model engine used parsnip::set_engine(). .model_spec_class model spec class use parsnip. example 'kernlab' engine can use svm_poly svm_rbf.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"tuneable parsnip model specification.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"function takes single parameter uses output generic tuneable model specification. function can work following parsnip/modeltime engines: \"auto_arima\" \"auto_arima_xgboost\" \"ets\" \"croston\" \"theta\" \"smooth_es\" \"stlm_ets\" \"tbats\" \"stlm_arima\" \"nnetar\" \"prophet\" \"prophet_xgboost\" \"lm\" \"glmnet\" \"stan\" \"spark\" \"keras\" \"earth\" \"xgboost\" \"kernlab\"","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_model_spec_tune_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Model Spec Template — ts_model_spec_tune_template","text":"","code":"ts_model_spec_tune_template(\"ets\") #> Exponential Smoothing State Space Model Specification (regression) #>  #> Main Arguments: #>   seasonal_period = auto #>   error = auto #>   trend = auto #>   season = auto #>   damping = auto #>   smooth_level = tune::tune() #>   smooth_trend = tune::tune() #>   smooth_seasonal = tune::tune() #>  #> Computational engine: ets  #>  ts_model_spec_tune_template(\"prophet\") #> PROPHET Regression Model Specification (regression) #>  #> Main Arguments: #>   changepoint_num = tune::tune() #>   changepoint_range = tune::tune() #>   seasonality_yearly = auto #>   seasonality_weekly = auto #>   seasonality_daily = auto #>   prior_scale_changepoints = tune::tune() #>   prior_scale_seasonality = tune::tune() #>   prior_scale_holidays = tune::tune() #>  #> Computational engine: prophet  #>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Control Run Chart — ts_qc_run_chart","title":"Quality Control Run Chart — ts_qc_run_chart","text":"control chart specific type graph shows data points upper lower limits period time. can use understand process control . charts commonly three types lines upper lower specification limits, upper lower limits planned value. help lines, Control Charts show process behavior time.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Control Run Chart — ts_qc_run_chart","text":"","code":"ts_qc_run_chart(   .data,   .date_col,   .value_col,   .interactive = FALSE,   .median = TRUE,   .cl = TRUE,   .mcl = TRUE,   .ucl = TRUE,   .lc = FALSE,   .lmcl = FALSE,   .llcl = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Control Run Chart — ts_qc_run_chart","text":".data data.frame/tibble passed. .date_col column holding timestamp. .value_col column values analyzed. .interactive Default FALSE, TRUE interactive plotly plot. .median Default TRUE. show median line data. .cl first upper control line .mcl second sigma control line positive .ucl third sigma control line positive .lc first negative control line .lmcl second sigma negative control line .llcl si thrid sigma negative control line","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Control Run Chart — ts_qc_run_chart","text":"static ggplot2 graph .interactive set TRUE plotly plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quality Control Run Chart — ts_qc_run_chart","text":"Expects time-series tibble/data.frame Expects date column value column","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quality Control Run Chart — ts_qc_run_chart","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qc_run_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Control Run Chart — ts_qc_run_chart","text":"","code":"library(dplyr)  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  data_tbl %>%   ts_qc_run_chart(     .date_col    = date_col     , .value_col = value     , .llcl      = TRUE   )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Model QQ Plot — ts_qq_plot","title":"Time Series Model QQ Plot — ts_qq_plot","text":"takes calibration tibble produce QQ plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Model QQ Plot — ts_qq_plot","text":"","code":"ts_qq_plot(.calibration_tbl, .model_id = NULL, .interactive = FALSE)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Model QQ Plot — ts_qq_plot","text":".calibration_tbl calibrated modeltime table. .model_id id particular model calibration tibble. multiple models tibble remains NULL plot returned using ggplot2::facet_grid(~ .model_id) .interactive boolean default value FALSE. TRUE produce interactive plotly plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Model QQ Plot — ts_qq_plot","text":"QQ plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Model QQ Plot — ts_qq_plot","text":"takes calibration tibble create QQ plot. can also pass model_id boolean interactive return plotly::ggplotly interactive plot.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Model QQ Plot — ts_qq_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_qq_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Model QQ Plot — ts_qq_plot","text":"","code":"# NOT RUN if (FALSE) { suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(rsample)) suppressPackageStartupMessages(library(workflows)) suppressPackageStartupMessages(library(parsnip)) suppressPackageStartupMessages(library(recipes))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(   data_tbl,   date_var = date_col,   assess = \"12 months\",   cumulative = TRUE )  rec_obj <- recipe(value ~ ., training(splits))  model_spec_arima <- arima_reg() %>%   set_engine(engine = \"auto_arima\")  model_spec_mars <- mars(mode = \"regression\") %>%   set_engine(\"earth\")  wflw_fit_arima <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_arima) %>%   fit(training(splits))  wflw_fit_mars <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_mars) %>%   fit(training(splits))  model_tbl <- modeltime_table(wflw_fit_arima, wflw_fit_mars)  calibration_tbl <- model_tbl %>%   modeltime_calibrate(new_data = testing(splits))  ts_qq_plot(calibration_tbl)  }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Walk Function — ts_random_walk","title":"Random Walk Function — ts_random_walk","text":"function takes four arguments returns tibble random walks.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Walk Function — ts_random_walk","text":"","code":"ts_random_walk(   .mean = 0,   .sd = 0.1,   .num_walks = 100,   .periods = 100,   .initial_value = 1000 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Walk Function — ts_random_walk","text":".mean desired mean random walks .sd standard deviation random walks .num_walks number random walks want generated .periods length random walk(s) want generated .initial_value initial value random walks start","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Walk Function — ts_random_walk","text":"tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Walk Function — ts_random_walk","text":"Monte Carlo simulations first formally designed 1940’s developing nuclear weapons, since heavily used various fields use randomness solve problems potentially deterministic nature. finance, Monte Carlo simulations can useful tool give sense assets certain characteristics might behave future. complex sophisticated financial forecasting methods ARIMA (Auto-Regressive Integrated Moving Average) GARCH (Generalized Auto-Regressive Conditional Heteroskedasticity) attempt model randomness underlying macro factors seasonality volatility clustering, Monte Carlo random walks work surprisingly well illustrating market volatility long results taken seriously.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Walk Function — ts_random_walk","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Walk Function — ts_random_walk","text":"","code":"ts_random_walk( .mean = 0, .sd = 1, .num_walks = 25, .periods = 180, .initial_value = 6 ) #> # A tibble: 4,500 × 4 #>      run     x       y   cum_y #>    <dbl> <dbl>   <dbl>   <dbl> #>  1     1     1 -1.20   -1.20   #>  2     1     2 -0.134  -1.04   #>  3     1     3 -0.134  -0.898  #>  4     1     4 -0.946  -0.0486 #>  5     1     5  0.679  -0.0816 #>  6     1     6 -0.188  -0.0663 #>  7     1     7  0.581  -0.105  #>  8     1     8  0.553  -0.163  #>  9     1     9  0.161  -0.189  #> 10     1    10  0.0301 -0.195  #> # ℹ 4,490 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"Get layers add ggplot graph ts_random_walk() function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"","code":"ts_random_walk_ggplot_layers(.data)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":".data data passed function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"ggplot2 layers object","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"Set intercept initial value random walk Set max min cumulative sum random walks","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk_ggplot_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Random Walk ggplot2 layers — ts_random_walk_ggplot_layers","text":"","code":"library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.2.3  df <- ts_random_walk()  df %>%   ggplot(     mapping = aes(       x = x       , y = cum_y       , color = factor(run)       , group = factor(run)    )  ) +  geom_line(alpha = 0.8) +  ts_random_walk_ggplot_layers(df)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"8 Hex RGB color definitions suitable charts colorblind people.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"","code":"ts_scale_color_colorblind(..., theme = \"ts\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"... Data passed ggplot object theme Right now ts . Anything else render error.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"gggplot layer","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"function used others order help render plots color blind.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_color_colorblind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provide Colorblind Compliant Colors — ts_scale_color_colorblind","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"8 Hex RGB color definitions suitable charts colorblind people.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"","code":"ts_scale_fill_colorblind(..., theme = \"ts\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"... Data passed ggplot object theme Right now ts . Anything else render error.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"gggplot layer","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"function used others order help render plots color blind.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scale_fill_colorblind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provide Colorblind Compliant Colors — ts_scale_fill_colorblind","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"takes calibration tibble produce scedacity plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"","code":"ts_scedacity_scatter_plot(   .calibration_tbl,   .model_id = NULL,   .interactive = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":".calibration_tbl calibrated modeltime table. .model_id id particular model calibration tibble. multiple models tibble remains NULL plot returned using ggplot2::facet_grid(~ .model_id) .interactive boolean default value FALSE. TRUE produce interactive plotly plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"Scedacity plot.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"takes calibration tibble create scedacity plot. can also pass model_id boolean interactive return plotly::ggplotly interactive plot.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_scedacity_scatter_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Model Scedacity Plot — ts_scedacity_scatter_plot","text":"","code":"# NOT RUN if (FALSE) { suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(rsample)) suppressPackageStartupMessages(library(workflows)) suppressPackageStartupMessages(library(parsnip)) suppressPackageStartupMessages(library(recipes))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(   data_tbl,   date_var = date_col,   assess = \"12 months\",   cumulative = TRUE )  rec_obj <- recipe(value ~ ., training(splits))  model_spec_arima <- arima_reg() %>%   set_engine(engine = \"auto_arima\")  model_spec_mars <- mars(mode = \"regression\") %>%   set_engine(\"earth\")  wflw_fit_arima <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_arima) %>%   fit(training(splits))  wflw_fit_mars <- workflow() %>%   add_recipe(rec_obj) %>%   add_model(model_spec_mars) %>%   fit(training(splits))  model_tbl <- modeltime_table(wflw_fit_arima, wflw_fit_mars)  calibration_tbl <- model_tbl %>%   modeltime_calibrate(new_data = testing(splits))  ts_scedacity_scatter_plot(calibration_tbl)  }"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Moving Average Plot — ts_sma_plot","title":"Simple Moving Average Plot — ts_sma_plot","text":"function take value column return number n moving averages.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Moving Average Plot — ts_sma_plot","text":"","code":"ts_sma_plot(   .data,   .date_col,   .value_col,   .sma_order = 2,   .func = mean,   .align = \"center\",   .partial = FALSE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Moving Average Plot — ts_sma_plot","text":".data data passing, must data.frame/tibble. .date_col column holds date. .value_col column holds value. .sma_order default 1. can vector like c(2,4,6,12) .func unquoted function want pass, mean, median, etc .align can either \"left\", \"center\", \"right\" .partial bool value TRUE/FALSE, default TRUE","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Moving Average Plot — ts_sma_plot","text":"return list object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Moving Average Plot — ts_sma_plot","text":"function accept time series object tibble/data.frame. simple wrapper around timetk::slidify_vec(). uses function underlying moving average work. can handle single moving average time therefore multiple called , loop append data tibble object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple Moving Average Plot — ts_sma_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Moving Average Plot — ts_sma_plot","text":"","code":"df <- ts_to_tbl(AirPassengers) out <- ts_sma_plot(df, date_col, value, .sma_order = c(3,6))  out$data #> # A tibble: 288 × 5 #>    index     date_col   value sma_order sma_value #>    <yearmon> <date>     <dbl> <fct>         <dbl> #>  1 Jan 1949  1949-01-01   112 3               NA  #>  2 Feb 1949  1949-02-01   118 3              121. #>  3 Mar 1949  1949-03-01   132 3              126. #>  4 Apr 1949  1949-04-01   129 3              127. #>  5 May 1949  1949-05-01   121 3              128. #>  6 Jun 1949  1949-06-01   135 3              135. #>  7 Jul 1949  1949-07-01   148 3              144. #>  8 Aug 1949  1949-08-01   148 3              144  #>  9 Sep 1949  1949-09-01   136 3              134. #> 10 Oct 1949  1949-10-01   119 3              120. #> # ℹ 278 more rows  out$plots$static_plot #> Warning: Removed 7 rows containing missing values (`geom_line()`)."},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Splits Plot — ts_splits_plot","title":"Time Series Splits Plot — ts_splits_plot","text":"Sometimes want see training testing data plot. simple wrapper around couple functions timetk package.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Splits Plot — ts_splits_plot","text":"","code":"ts_splits_plot(.splits_obj, .date_col, .value_col)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Splits Plot — ts_splits_plot","text":".splits_obj predefined splits object. .date_col date column time series. .value_col value column time series.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Splits Plot — ts_splits_plot","text":"time series cv plan plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Splits Plot — ts_splits_plot","text":"already splits object defined. function takes three parameters, splits object, date column value column.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Splits Plot — ts_splits_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_splits_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Splits Plot — ts_splits_plot","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr))  data <- ts_to_tbl(AirPassengers) %>%   select(-index)  splits <- time_series_split(     data     , date_col     , assess = 12     , skip = 3     , cumulative = TRUE )  ts_splits_plot(     .splits_obj = splits,     .date_col   = date_col,     .value_col  = value )  {\"x\":{\"data\":[{\"x\":[\"1949-01-01\",\"1949-02-01\",\"1949-03-01\",\"1949-04-01\",\"1949-05-01\",\"1949-06-01\",\"1949-07-01\",\"1949-08-01\",\"1949-09-01\",\"1949-10-01\",\"1949-11-01\",\"1949-12-01\",\"1950-01-01\",\"1950-02-01\",\"1950-03-01\",\"1950-04-01\",\"1950-05-01\",\"1950-06-01\",\"1950-07-01\",\"1950-08-01\",\"1950-09-01\",\"1950-10-01\",\"1950-11-01\",\"1950-12-01\",\"1951-01-01\",\"1951-02-01\",\"1951-03-01\",\"1951-04-01\",\"1951-05-01\",\"1951-06-01\",\"1951-07-01\",\"1951-08-01\",\"1951-09-01\",\"1951-10-01\",\"1951-11-01\",\"1951-12-01\",\"1952-01-01\",\"1952-02-01\",\"1952-03-01\",\"1952-04-01\",\"1952-05-01\",\"1952-06-01\",\"1952-07-01\",\"1952-08-01\",\"1952-09-01\",\"1952-10-01\",\"1952-11-01\",\"1952-12-01\",\"1953-01-01\",\"1953-02-01\",\"1953-03-01\",\"1953-04-01\",\"1953-05-01\",\"1953-06-01\",\"1953-07-01\",\"1953-08-01\",\"1953-09-01\",\"1953-10-01\",\"1953-11-01\",\"1953-12-01\",\"1954-01-01\",\"1954-02-01\",\"1954-03-01\",\"1954-04-01\",\"1954-05-01\",\"1954-06-01\",\"1954-07-01\",\"1954-08-01\",\"1954-09-01\",\"1954-10-01\",\"1954-11-01\",\"1954-12-01\",\"1955-01-01\",\"1955-02-01\",\"1955-03-01\",\"1955-04-01\",\"1955-05-01\",\"1955-06-01\",\"1955-07-01\",\"1955-08-01\",\"1955-09-01\",\"1955-10-01\",\"1955-11-01\",\"1955-12-01\",\"1956-01-01\",\"1956-02-01\",\"1956-03-01\",\"1956-04-01\",\"1956-05-01\",\"1956-06-01\",\"1956-07-01\",\"1956-08-01\",\"1956-09-01\",\"1956-10-01\",\"1956-11-01\",\"1956-12-01\",\"1957-01-01\",\"1957-02-01\",\"1957-03-01\",\"1957-04-01\",\"1957-05-01\",\"1957-06-01\",\"1957-07-01\",\"1957-08-01\",\"1957-09-01\",\"1957-10-01\",\"1957-11-01\",\"1957-12-01\",\"1958-01-01\",\"1958-02-01\",\"1958-03-01\",\"1958-04-01\",\"1958-05-01\",\"1958-06-01\",\"1958-07-01\",\"1958-08-01\",\"1958-09-01\",\"1958-10-01\",\"1958-11-01\",\"1958-12-01\",\"1959-01-01\",\"1959-02-01\",\"1959-03-01\",\"1959-04-01\",\"1959-05-01\",\"1959-06-01\",\"1959-07-01\",\"1959-08-01\",\"1959-09-01\",\"1959-10-01\",\"1959-11-01\",\"1959-12-01\"],\"y\":[112,118,132,129,121,135,148,148,136,119,104,118,115,126,141,135,125,149,170,170,158,133,114,140,145,150,178,163,172,178,199,199,184,162,146,166,171,180,193,181,183,218,230,242,209,191,172,194,196,196,236,235,229,243,264,272,237,211,180,201,204,188,235,227,234,264,302,293,259,229,203,229,242,233,267,269,270,315,364,347,312,274,237,278,284,277,317,313,318,374,413,405,355,306,271,306,315,301,356,348,355,422,465,467,404,347,305,336,340,318,362,348,363,435,491,505,404,359,310,337,360,342,406,396,420,472,548,559,463,407,362,405],\"text\":[\"date_col: 1949-01-01<br />.value: 112<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-02-01<br />.value: 118<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-03-01<br />.value: 132<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-04-01<br />.value: 129<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-05-01<br />.value: 121<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-06-01<br />.value: 135<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-07-01<br />.value: 148<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-08-01<br />.value: 148<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-09-01<br />.value: 136<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-10-01<br />.value: 119<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-11-01<br />.value: 104<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1949-12-01<br />.value: 118<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-01-01<br />.value: 115<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-02-01<br />.value: 126<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-03-01<br />.value: 141<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-04-01<br />.value: 135<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-05-01<br />.value: 125<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-06-01<br />.value: 149<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-07-01<br />.value: 170<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-08-01<br />.value: 170<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-09-01<br />.value: 158<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-10-01<br />.value: 133<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-11-01<br />.value: 114<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1950-12-01<br />.value: 140<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-01-01<br />.value: 145<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-02-01<br />.value: 150<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-03-01<br />.value: 178<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-04-01<br />.value: 163<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-05-01<br />.value: 172<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-06-01<br />.value: 178<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-07-01<br />.value: 199<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-08-01<br />.value: 199<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-09-01<br />.value: 184<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-10-01<br />.value: 162<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-11-01<br />.value: 146<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1951-12-01<br />.value: 166<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-01-01<br />.value: 171<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-02-01<br />.value: 180<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-03-01<br />.value: 193<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-04-01<br />.value: 181<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-05-01<br />.value: 183<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-06-01<br />.value: 218<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-07-01<br />.value: 230<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-08-01<br />.value: 242<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-09-01<br />.value: 209<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-10-01<br />.value: 191<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-11-01<br />.value: 172<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1952-12-01<br />.value: 194<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-01-01<br />.value: 196<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-02-01<br />.value: 196<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-03-01<br />.value: 236<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-04-01<br />.value: 235<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-05-01<br />.value: 229<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-06-01<br />.value: 243<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-07-01<br />.value: 264<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-08-01<br />.value: 272<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-09-01<br />.value: 237<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-10-01<br />.value: 211<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-11-01<br />.value: 180<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1953-12-01<br />.value: 201<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-01-01<br />.value: 204<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-02-01<br />.value: 188<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-03-01<br />.value: 235<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-04-01<br />.value: 227<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-05-01<br />.value: 234<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-06-01<br />.value: 264<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-07-01<br />.value: 302<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-08-01<br />.value: 293<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-09-01<br />.value: 259<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-10-01<br />.value: 229<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-11-01<br />.value: 203<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1954-12-01<br />.value: 229<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-01-01<br />.value: 242<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-02-01<br />.value: 233<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-03-01<br />.value: 267<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-04-01<br />.value: 269<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-05-01<br />.value: 270<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-06-01<br />.value: 315<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-07-01<br />.value: 364<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-08-01<br />.value: 347<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-09-01<br />.value: 312<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-10-01<br />.value: 274<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-11-01<br />.value: 237<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1955-12-01<br />.value: 278<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-01-01<br />.value: 284<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-02-01<br />.value: 277<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-03-01<br />.value: 317<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-04-01<br />.value: 313<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-05-01<br />.value: 318<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-06-01<br />.value: 374<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-07-01<br />.value: 413<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-08-01<br />.value: 405<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-09-01<br />.value: 355<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-10-01<br />.value: 306<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-11-01<br />.value: 271<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1956-12-01<br />.value: 306<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-01-01<br />.value: 315<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-02-01<br />.value: 301<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-03-01<br />.value: 356<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-04-01<br />.value: 348<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-05-01<br />.value: 355<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-06-01<br />.value: 422<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-07-01<br />.value: 465<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-08-01<br />.value: 467<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-09-01<br />.value: 404<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-10-01<br />.value: 347<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-11-01<br />.value: 305<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1957-12-01<br />.value: 336<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-01-01<br />.value: 340<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-02-01<br />.value: 318<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-03-01<br />.value: 362<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-04-01<br />.value: 348<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-05-01<br />.value: 363<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-06-01<br />.value: 435<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-07-01<br />.value: 491<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-08-01<br />.value: 505<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-09-01<br />.value: 404<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-10-01<br />.value: 359<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-11-01<br />.value: 310<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1958-12-01<br />.value: 337<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-01-01<br />.value: 360<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-02-01<br />.value: 342<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-03-01<br />.value: 406<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-04-01<br />.value: 396<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-05-01<br />.value: 420<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-06-01<br />.value: 472<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-07-01<br />.value: 548<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-08-01<br />.value: 559<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-09-01<br />.value: 463<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-10-01<br />.value: 407<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-11-01<br />.value: 362<br />.color_mod: training<br />.color_mod: training\",\"date_col: 1959-12-01<br />.value: 405<br />.color_mod: training<br />.color_mod: training\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(44,62,80,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"training\",\"legendgroup\":\"training\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[\"1960-01-01\",\"1960-02-01\",\"1960-03-01\",\"1960-04-01\",\"1960-05-01\",\"1960-06-01\",\"1960-07-01\",\"1960-08-01\",\"1960-09-01\",\"1960-10-01\",\"1960-11-01\",\"1960-12-01\"],\"y\":[417,391,419,461,472,535,622,606,508,461,390,432],\"text\":[\"date_col: 1960-01-01<br />.value: 417<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-02-01<br />.value: 391<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-03-01<br />.value: 419<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-04-01<br />.value: 461<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-05-01<br />.value: 472<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-06-01<br />.value: 535<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-07-01<br />.value: 622<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-08-01<br />.value: 606<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-09-01<br />.value: 508<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-10-01<br />.value: 461<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-11-01<br />.value: 390<br />.color_mod: testing<br />.color_mod: testing\",\"date_col: 1960-12-01<br />.value: 432<br />.color_mod: testing<br />.color_mod: testing\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(227,26,28,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"testing\",\"legendgroup\":\"testing\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":52.529680365296812,\"r\":7.3059360730593621,\"b\":22.648401826484022,\"l\":28.493150684931514},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Time Series Cross Validation Plan\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"date\",\"autorange\":true,\"range\":[\"1948-05-28\",\"1961-07-06\"],\"tickmode\":\"auto\",\"ticktext\":[\"1950\",\"1955\",\"1960\"],\"tickvals\":[-7305,-5479,-3653],\"categoryorder\":\"array\",\"categoryarray\":[\"1950\",\"1955\",\"1960\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.22139200221392005,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392005,\"zeroline\":false,\"anchor\":\"y\",\"title\":\"\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":true,\"range\":[78.099999999999994,647.89999999999998],\"tickmode\":\"auto\",\"ticktext\":[\"200\",\"400\",\"600\"],\"tickvals\":[200,400,600],\"categoryorder\":\"array\",\"categoryarray\":[\"200\",\"400\",\"600\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.22139200221392005,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392005,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(44,62,80,1)\",\"width\":0.33208800332088001,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":\"rgba(44,62,80,1)\",\"line\":{\"color\":\"rgba(44,62,80,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":24.973017849730184,\"yanchor\":1,\"ysizemode\":\"pixel\"}],\"annotations\":[{\"text\":\"Slice1\",\"x\":0.5,\"y\":1,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(255,255,255,1)\",\"family\":\"\",\"size\":11.68949771689498},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"bottom\"}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Legend\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.611872146118724}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"570c4bd5c6c\":{\"x\":{},\"y\":{},\"colour\":{},\"type\":\"scatter\"}},\"cur_data\":\"570c4bd5c6c\",\"visdat\":{\"570c4bd5c6c\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Analysis — ts_time_event_analysis_tbl","title":"Event Analysis — ts_time_event_analysis_tbl","text":"Given tibble/data.frame, can get information happens , , directions given event, event defined percentage increase/decrease values time t t+1","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Analysis — ts_time_event_analysis_tbl","text":"","code":"ts_time_event_analysis_tbl(   .data,   .date_col,   .value_col,   .percent_change = 0.05,   .horizon = 12,   .precision = 2,   .direction = \"forward\",   .filter_non_event_groups = TRUE )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Analysis — ts_time_event_analysis_tbl","text":".data date.frame/tibble holds data. .date_col column date value. .value_col column value measuring. .percent_change defaults 0.05 5% increase .value_col. .horizon far want look back ahead. .precision default 2 means rounds lagged 1 value percent change 2 decimal points. may want finely tuned results, result fewer groupings. .direction default forward. can supply either forward, backwards . .filter_non_event_groups default TRUE, drops groupings events rare occasion occur.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event Analysis — ts_time_event_analysis_tbl","text":"tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event Analysis — ts_time_event_analysis_tbl","text":"takes data.frame/tibble time series. requires date column, value column. can convert ts/xts/zoo/mts object tibble using ts_to_tbl() function. provide function percentage change form -1 1 inclusive. provide time horizon want see. example may want see happens AirPassengers 0.1 percent increase volume. next important thing supply direction. want see typically happens event, leads event, .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Event Analysis — ts_time_event_analysis_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_time_event_analysis_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event Analysis — ts_time_event_analysis_tbl","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(ggplot2))  df_tbl <- ts_to_tbl(AirPassengers) %>% select(-index)  tst <- ts_time_event_analysis_tbl(df_tbl, date_col, value, .direction = \"both\", .horizon = 6)  glimpse(tst) #> Rows: 33 #> Columns: 18 #> $ rowid                <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… #> $ date_col             <date> 1949-02-01, 1949-03-01, 1949-04-01, 1949-05-01, … #> $ value                <dbl> 118, 132, 129, 121, 135, 148, 148, 199, 184, 162,… #> $ lag_val              <dbl> 112, 118, 132, 129, 121, 135, 148, 199, 199, 184,… #> $ adj_diff             <dbl> 6, 14, -3, -8, 14, 13, 0, 0, -15, -22, -16, 20, 5… #> $ relative_change_raw  <dbl> 0.05357143, 0.11864407, -0.02272727, -0.06201550,… #> $ relative_change      <dbl> 0.05, 0.12, -0.02, -0.06, 0.12, 0.10, 0.00, 0.00,… #> $ pct_chg_mark         <lgl> TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F… #> $ event_base_change    <dbl> 0.00000000, 0.11864407, -0.02272727, -0.06201550,… #> $ group_number         <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2… #> $ numeric_group_number <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2… #> $ group_event_number   <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… #> $ x                    <int> 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1… #> $ mean_event_change    <dbl> 0.00000000, 0.03849647, -0.06815622, -0.04991040,… #> $ median_event_change  <dbl> 0.00000000, 0.07222222, -0.06217617, -0.06201550,… #> $ event_change_ci_low  <dbl> 0.00000000, -0.06799693, -0.11669576, -0.09692794… #> $ event_change_ci_high <dbl> 0.000000000, 0.116322976, -0.024699717, 0.0073964… #> $ event_type           <fct> Before, Before, Before, Before, Before, Before, A…  tst %>%   ggplot(aes(x = x, y = mean_event_change)) +   geom_line() +   geom_line(aes(y = event_change_ci_high), color = \"blue\", linetype = \"dashed\") +   geom_line(aes(y = event_change_ci_low), color = \"blue\", linetype = \"dashed\") +   geom_vline(xintercept = 7, color = \"red\", linetype = \"dashed\") +   theme_minimal() +   labs(     title = \"'AirPassengers' Event Analysis at 5% Increase\",     subtitle = \"Vertical Red line is normalized event epoch - Direction: Both\",     x = \"\",     y = \"Mean Event Change\"   )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a time-series object to a tibble — ts_to_tbl","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"function takes time-series object returns tibble format.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"","code":"ts_to_tbl(.data)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":".data time-series object want transformed tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"tibble","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"function makes use timetk::tk_tbl() hood obtain initial tibble object. inital object obtained new column called date_col constructed index column using lubridate index column returned.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_to_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a time-series object to a tibble — ts_to_tbl","text":"","code":"ts_to_tbl(BJsales) #> # A tibble: 150 × 1 #>    value #>    <dbl> #>  1  200. #>  2  200. #>  3  199. #>  4  199. #>  5  199  #>  6  200. #>  7  199. #>  8  200  #>  9  200. #> 10  201. #> # ℹ 140 more rows ts_to_tbl(AirPassengers) #> # A tibble: 144 × 3 #>    index     date_col   value #>    <yearmon> <date>     <dbl> #>  1 Jan 1949  1949-01-01   112 #>  2 Feb 1949  1949-02-01   118 #>  3 Mar 1949  1949-03-01   132 #>  4 Apr 1949  1949-04-01   129 #>  5 May 1949  1949-05-01   121 #>  6 Jun 1949  1949-06-01   135 #>  7 Jul 1949  1949-07-01   148 #>  8 Aug 1949  1949-08-01   148 #>  9 Sep 1949  1949-09-01   136 #> 10 Oct 1949  1949-10-01   119 #> # ℹ 134 more rows"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Function Velocity — ts_velocity_augment","title":"Augment Function Velocity — ts_velocity_augment","text":"Takes numeric vector return velocity vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Function Velocity — ts_velocity_augment","text":"","code":"ts_velocity_augment(.data, .value, .names = \"auto\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Function Velocity — ts_velocity_augment","text":".data data passed augmented function. .value passed rlang::enquo() capture vectors want augment. .names default \"auto\"","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Function Velocity — ts_velocity_augment","text":"augmented","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment Function Velocity — ts_velocity_augment","text":"Takes numeric vector return velocity vector. velocity time series computed taking first difference, $$x_t - x_t1$$ function intended used order add columns tibble.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Augment Function Velocity — ts_velocity_augment","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment Function Velocity — ts_velocity_augment","text":"","code":"suppressPackageStartupMessages(library(dplyr))  len_out    = 10 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  ts_velocity_augment(data_tbl, b) #> # A tibble: 10 × 4 #>    date_col         a     b velocity_b #>    <date>       <dbl> <dbl>      <dbl> #>  1 2021-01-01  0.0130 0.535   NA       #>  2 2021-02-01  0.335  0.596    0.0608  #>  3 2021-03-01 -1.59   0.619    0.0238  #>  4 2021-04-01 -0.290  0.367   -0.253   #>  5 2021-05-01 -0.195  0.444    0.0770  #>  6 2021-06-01 -0.956  0.965    0.521   #>  7 2021-07-01 -0.869  0.659   -0.306   #>  8 2021-08-01  0.833  0.800    0.141   #>  9 2021-09-01  1.33   0.799   -0.00112 #> 10 2021-10-01 -1.16   0.670   -0.129"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Function Time Series Acceleration — ts_velocity_vec","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"Takes numeric vector return velocity vector.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"","code":"ts_velocity_vec(.x)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":".x numeric vector","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"numeric vector","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"Takes numeric vector return velocity vector. velocity time series computed taking first difference, $$x_t - x_t1$$ function can used . also basis function ts_velocity_augment().","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_velocity_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Function Time Series Acceleration — ts_velocity_vec","text":"","code":"suppressPackageStartupMessages(library(dplyr))  len_out    = 25 by_unit    = \"month\" start_date = as.Date(\"2021-01-01\")  data_tbl <- tibble(   date_col = seq.Date(from = start_date, length.out = len_out, by = by_unit),   a    = rnorm(len_out),   b    = runif(len_out) )  vec_1 <- ts_velocity_vec(data_tbl$b)  plot(data_tbl$b) lines(data_tbl$b) lines(vec_1, col = \"blue\")"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"function produce three plots faceted single graph. three graphs following: Value Plot (Actual values) Value Velocity Plot Value Acceleration Plot","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"","code":"ts_vva_plot(.data, .date_col, .value_col)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":".data data want visualize. pre-processed aggregation match .frequency argument. .date_col data column .data argument. .value_col value column .data argument","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"original time series augmented differenced data, static plot plotly plot ggplot object. output list gets returned invisibly.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"function expects take data.frame/tibble. return list object contains augmented data along static plot interactive plotly plot. important data prepared minimum date column value column need supplied function. data ts, xts, zoo mts use ts_to_tbl() convert tibble.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Value, Velocity and Acceleration Plot — ts_vva_plot","text":"","code":"suppressPackageStartupMessages(library(dplyr))  data_tbl <- ts_to_tbl(AirPassengers) %>%   select(-index)  ts_vva_plot(data_tbl, date_col, value)$plots$static_plot #> Warning: Removed 3 rows containing missing values (`geom_line()`)."},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"","code":"ts_wfs_arima_boost(   .model_type = \"all_engines\",   .recipe_list,   .trees = 10,   .min_node = 2,   .tree_depth = 6,   .learn_rate = 0.015,   .stop_iter = NULL,   .seasonal_period = 0,   .non_seasonal_ar = 0,   .non_seasonal_differences = 0,   .non_seasonal_ma = 0,   .seasonal_ar = 0,   .seasonal_differences = 0,   .seasonal_ma = 0 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":".model_type set engine. uses modeltime::arima_boost() hood can take one following: \"arima_xgboost\" \"auto_arima_xgboost \"all_engines\" - make model spec available engines. .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .trees integer number trees contained ensemble. .min_node integer minimum number data points node required node split . .tree_depth integer maximum depth tree (.e. number splits) (specific engines ). .learn_rate number rate boosting algorithm adapts iteration--iteration (specific engines ). .stop_iter number iterations without improvement stopping (xgboost ). .seasonal_period Set 0, .non_seasonal_ar Set 0, .non_seasonal_differences Set 0, .non_seasonal_ma Set 0, .seasonal_ar Set 0, .seasonal_differences Set 0, .seasonal_ma Set 0,","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"auto_arima_xgboost\") set_engine(\"arima_xgboost\") modeltime::arima_boost() arima_boost() way generate specification time series model uses boosting improve modeling errors (residuals) Exogenous Regressors. works \"automated\" ARIMA (auto.arima) standard ARIMA (arima). main algorithms : Auto ARIMA + XGBoost Errors (engine = auto_arima_xgboost, default) ARIMA + XGBoost Errors (engine = arima_xgboost)","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_arima_boost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto Arima XGBoost Workflowset Function — ts_wfs_arima_boost","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_arima_boost(\"all_engines\", rec_objs) wf_sets #> # A workflow set/tibble: 8 × 4 #>   wflow_id                           info             option    result     #>   <chr>                              <list>           <list>    <list>     #> 1 rec_base_arima_boost_1             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_base_arima_boost_2             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_arima_boost_1             <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_arima_boost_2             <tibble [1 × 4]> <opts[0]> <list [0]> #> 5 rec_date_fourier_arima_boost_1     <tibble [1 × 4]> <opts[0]> <list [0]> #> 6 rec_date_fourier_arima_boost_2     <tibble [1 × 4]> <opts[0]> <list [0]> #> 7 rec_date_fourier_nzv_arima_boost_1 <tibble [1 × 4]> <opts[0]> <list [0]> #> 8 rec_date_fourier_nzv_arima_boost_2 <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"","code":"ts_wfs_auto_arima(.model_type = \"auto_arima\", .recipe_list)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":".model_type set engine. uses modeltime::arima_reg() hood can take one following: \"auto_arima\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...)","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"auto_arima\") therefore .model_type needed. parameter kept possible future change, keeps framework functions written. modeltime::arima_reg() arima_reg() way generate specification ARIMA model fitting allows model created using different packages. Currently package forecast.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_auto_arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto Arima (Forecast auto_arima) Workflowset Function — ts_wfs_auto_arima","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_auto_arima(\"auto_arima\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                       info             option    result     #>   <chr>                          <list>           <list>    <list>     #> 1 rec_base_arima_reg             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_arima_reg             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_arima_reg     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_arima_reg <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto ETS Workflowset Function — ts_wfs_ets_reg","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"","code":"ts_wfs_ets_reg(   .model_type = \"all_engines\",   .recipe_list,   .seasonal_period = \"auto\",   .error = \"auto\",   .trend = \"auto\",   .season = \"auto\",   .damping = \"auto\",   .smooth_level = 0.1,   .smooth_trend = 0.1,   .smooth_seasonal = 0.1 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":".model_type set engine. uses modeltime::exp_smoothing() hood can take one following: \"ets\" \"croston\" \"theta\" \"smooth_es\" \"all_engines\" - make model spec available engines. .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .seasonal_period seasonal frequency. Uses \"auto\" default. character phrase \"auto\" time-based phrase \"2 weeks\" can used date date-time variable provided. See Fit Details . .error form error term: \"auto\", \"additive\", \"multiplicative\". error multiplicative, data must non-negative. .trend form trend term: \"auto\", \"additive\", \"multiplicative\" or0 \"none\". .season form seasonal term: \"auto\", \"additive\", \"multiplicative\" \"none\". .damping Apply damping trend: \"auto\", \"damped\", \"none\". .smooth_level often called \"alpha\" parameter used base level smoothing factor exponential smoothing models. .smooth_trend often called \"beta\" parameter used trend smoothing factor exponential smoothing models. .smooth_seasonal often called \"gamma\" parameter used seasonal smoothing factor exponential smoothing models.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses following engines: modeltime::exp_smoothing() exp_smoothing() way generate specification Exponential Smoothing model fitting allows model created using different packages. Currently package forecast. Several algorithms implemented: \"ets\" \"croston\" \"theta\" \"smooth_es","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_ets_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto ETS Workflowset Function — ts_wfs_ets_reg","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_ets_reg(\"all_engines\", rec_objs) wf_sets #> # A workflow set/tibble: 16 × 4 #>    wflow_id                             info             option    result     #>    <chr>                                <list>           <list>    <list>     #>  1 rec_base_exp_smoothing_1             <tibble [1 × 4]> <opts[0]> <list [0]> #>  2 rec_base_exp_smoothing_2             <tibble [1 × 4]> <opts[0]> <list [0]> #>  3 rec_base_exp_smoothing_3             <tibble [1 × 4]> <opts[0]> <list [0]> #>  4 rec_base_exp_smoothing_4             <tibble [1 × 4]> <opts[0]> <list [0]> #>  5 rec_date_exp_smoothing_1             <tibble [1 × 4]> <opts[0]> <list [0]> #>  6 rec_date_exp_smoothing_2             <tibble [1 × 4]> <opts[0]> <list [0]> #>  7 rec_date_exp_smoothing_3             <tibble [1 × 4]> <opts[0]> <list [0]> #>  8 rec_date_exp_smoothing_4             <tibble [1 × 4]> <opts[0]> <list [0]> #>  9 rec_date_fourier_exp_smoothing_1     <tibble [1 × 4]> <opts[0]> <list [0]> #> 10 rec_date_fourier_exp_smoothing_2     <tibble [1 × 4]> <opts[0]> <list [0]> #> 11 rec_date_fourier_exp_smoothing_3     <tibble [1 × 4]> <opts[0]> <list [0]> #> 12 rec_date_fourier_exp_smoothing_4     <tibble [1 × 4]> <opts[0]> <list [0]> #> 13 rec_date_fourier_nzv_exp_smoothing_1 <tibble [1 × 4]> <opts[0]> <list [0]> #> 14 rec_date_fourier_nzv_exp_smoothing_2 <tibble [1 × 4]> <opts[0]> <list [0]> #> 15 rec_date_fourier_nzv_exp_smoothing_3 <tibble [1 × 4]> <opts[0]> <list [0]> #> 16 rec_date_fourier_nzv_exp_smoothing_4 <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"","code":"ts_wfs_lin_reg(.model_type, .recipe_list, .penalty = 1, .mixture = 0.5)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":".model_type set engine. uses parsnip::linear_reg() hood can take one following: \"lm\" \"glmnet\" \"all_engines\" - make model spec available engines. yet implemented : \"stan\" \"spark\" \"keras\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .penalty penalty parameter glmnet. default 1 .mixture mixture parameter glmnet. default 0.5","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set glmnet model specification, choose can set good understanding .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_lin_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto Linear Regression Workflowset Function — ts_wfs_lin_reg","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_lin_reg(\"all_engines\", rec_objs) wf_sets #> # A workflow set/tibble: 8 × 4 #>   wflow_id                          info             option    result     #>   <chr>                             <list>           <list>    <list>     #> 1 rec_base_linear_reg_1             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_base_linear_reg_2             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_linear_reg_1             <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_linear_reg_2             <tibble [1 × 4]> <opts[0]> <list [0]> #> 5 rec_date_fourier_linear_reg_1     <tibble [1 × 4]> <opts[0]> <list [0]> #> 6 rec_date_fourier_linear_reg_2     <tibble [1 × 4]> <opts[0]> <list [0]> #> 7 rec_date_fourier_nzv_linear_reg_1 <tibble [1 × 4]> <opts[0]> <list [0]> #> 8 rec_date_fourier_nzv_linear_reg_2 <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"","code":"ts_wfs_mars(   .model_type = \"earth\",   .recipe_list,   .num_terms = 200,   .prod_degree = 1,   .prune_method = \"backward\" )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":".model_type set engine. uses parsnip::mars() hood can take one following: \"earth\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .num_terms number features retained final model, including intercept. .prod_degree highest possible interaction degree. .prune_method pruning method. character, default \"backward\". can choose one following: \"backward\" \"none\" \"exhaustive\" \"forward\" \"seqrep\" \"cv\"","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"earth\") therefore .model_type needed. parameter kept possible future change, keeps framework functions written.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_mars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto MARS (Earth) Workflowset Function — ts_wfs_mars","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_mars(\"earth\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                  info             option    result     #>   <chr>                     <list>           <list>    <list>     #> 1 rec_base_mars             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_mars             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_mars     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_mars <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"","code":"ts_wfs_nnetar_reg(   .model_type = \"nnetar\",   .recipe_list,   .non_seasonal_ar = 0,   .seasonal_ar = 0,   .hidden_units = 5,   .num_networks = 10,   .penalty = 0.1,   .epochs = 10 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":".model_type set engine. uses modeltime::nnetar_reg() hood can take one following: \"nnetar\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .non_seasonal_ar order non-seasonal auto-regressive (AR) terms. Often denoted \"p\" pdq-notation. .seasonal_ar order seasonal auto-regressive (SAR) terms. Often denoted \"P\" PDQ-notation. .hidden_units integer number units hidden model. .num_networks Number networks fit different random starting weights. averaged producing forecasts. .penalty non-negative numeric value amount weight decay. .epochs integer number training iterations.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses following engines: modeltime::nnetar_reg() nnetar_reg() way generate specification NNETAR model fitting allows model created using different packages. Currently package forecast. \"nnetar\"","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_nnetar_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto NNETAR Workflowset Function — ts_wfs_nnetar_reg","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_nnetar_reg(\"nnetar\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                        info             option    result     #>   <chr>                           <list>           <list>    <list>     #> 1 rec_base_nnetar_reg             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_nnetar_reg             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_nnetar_reg     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_nnetar_reg <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"","code":"ts_wfs_prophet_reg(   .model_type = \"all_engines\",   .recipe_list,   .growth = NULL,   .changepoint_num = 25,   .changepoint_range = 0.8,   .seasonality_yearly = \"auto\",   .seasonality_weekly = \"auto\",   .seasonality_daily = \"auto\",   .season = \"additive\",   .prior_scale_changepoints = 25,   .prior_scale_seasonality = 1,   .prior_scale_holidays = 1,   .logistic_cap = NULL,   .logistic_floor = NULL,   .trees = 50,   .min_n = 10,   .tree_depth = 5,   .learn_rate = 0.01,   .loss_reduction = NULL,   .stop_iter = NULL )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":".model_type set engine. uses modeltime::prophet_reg() hood can take one following: \"prophet\" modeltime::prophet_boost() hood can take one following: \"prophet_xgboost\" can also choose: \"all_engines\" - make model spec available engines. .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .growth String 'linear' 'logistic' specify linear logistic trend. .changepoint_num Number potential changepoints include modeling trend. .changepoint_range Adjusts flexibility trend component limiting percentage data end time series. 0.80 means changepoint exist first 80% data. .seasonality_yearly One \"auto\", TRUE FALSE. Set FALSE prophet_xgboost. Toggles /seasonal component models year--year seasonality. .seasonality_weekly One \"auto\", TRUE FALSE. Toggles /seasonal component models week--week seasonality. Set FALSE prophet_xgboost .seasonality_daily One \"auto\", TRUE FALSE. Toggles /seasonal componet models day--day seasonality. Set FALSE prophet_xgboost .season 'additive' (default) 'multiplicative'. .prior_scale_changepoints Parameter modulating flexibility automatic changepoint selection. Large values allow many changepoints, small values allow changepoints. .prior_scale_seasonality Parameter modulating strength seasonality model. Larger values allow model fit larger seasonal fluctuations, smaller values dampen seasonality. .prior_scale_holidays Parameter modulating strength holiday components model, unless overridden holidays input. .logistic_cap growth logistic, upper-bound \"saturation\". .logistic_floor growth logistic, lower-bound \"saturation\" .trees integer number trees contained ensemble. .min_n integer minimum number data points node required node split . .tree_depth integer maximum depth tree (.e. number splits) (specific engines ). .learn_rate number rate boosting algorithm adapts iteration--iteration (specific engines ). .loss_reduction number reduction loss function required split (specific engines ). .stop_iter number iterations without improvement stopping (xgboost ).","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set prophet prophet_xgboost model specification, choose can set good understanding .","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_prophet_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto PROPHET Regression Workflowset Function — ts_wfs_prophet_reg","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_prophet_reg(\"all_engines\", rec_objs) wf_sets #> # A workflow set/tibble: 8 × 4 #>   wflow_id                           info             option    result     #>   <chr>                              <list>           <list>    <list>     #> 1 rec_base_prophet_reg               <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_base_prophet_boost             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_prophet_reg               <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_prophet_boost             <tibble [1 × 4]> <opts[0]> <list [0]> #> 5 rec_date_fourier_prophet_reg       <tibble [1 × 4]> <opts[0]> <list [0]> #> 6 rec_date_fourier_prophet_boost     <tibble [1 × 4]> <opts[0]> <list [0]> #> 7 rec_date_fourier_nzv_prophet_reg   <tibble [1 × 4]> <opts[0]> <list [0]> #> 8 rec_date_fourier_nzv_prophet_boost <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"","code":"ts_wfs_svm_poly(   .model_type = \"kernlab\",   .recipe_list,   .cost = 1,   .degree = 1,   .scale_factor = 1,   .margin = 0.1 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":".model_type set engine. uses parsnip::svm_poly() hood can take one following: \"kernlab\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .cost positive number cose predicting sample within wrong side margin. .degree positive number polynomial degree. .scale_factor positive number polynomial scaling factor. .margin positive number epsilon SVM insensitive loss function (regression .)","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"kernlab\") therefore .model_type needed. parameter kept possible future change, keeps framework functions written. parsnip::svm_poly() svm_poly() defines support vector machine model. classification, model tries maximize width margin classes. regression, model optimizes robust loss function affected large model residuals. SVM model uses nonlinear function, specifically polynomial function, create decision boundary regression line.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto SVM Poly (Kernlab) Workflowset Function — ts_wfs_svm_poly","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_svm_poly(\"kernlab\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                      info             option    result     #>   <chr>                         <list>           <list>    <list>     #> 1 rec_base_svm_poly             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_svm_poly             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_svm_poly     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_svm_poly <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"","code":"ts_wfs_svm_rbf(   .model_type = \"kernlab\",   .recipe_list,   .cost = 1,   .rbf_sigma = 0.01,   .margin = 0.1 )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":".model_type set engine. uses parsnip::svm_rbf() hood can take one following: \"kernlab\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .cost positive number cost predicting sample within wrong side margin. .rbf_sigma positive number radial basis function. .margin positive number epsilon SVM insensitive loss function (regression ).","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"kernlab\") therefore .model_type needed. parameter kept possible future change, keeps framework functions written. parsnip::svm_rbf() svm_rbf() defines support vector machine model. classification, model tries maximize width margin classes. regression, model optimizes robust loss function affected large model residuals. SVM model uses nonlinear function, specifically polynomial function, create decision boundary regression line.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_svm_rbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto SVM RBF (Kernlab) Workflowset Function — ts_wfs_svm_rbf","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_svm_rbf(\"kernlab\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                     info             option    result     #>   <chr>                        <list>           <list>    <list>     #> 1 rec_base_svm_rbf             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_svm_rbf             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_svm_rbf     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_svm_rbf <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"function used quickly create workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"","code":"ts_wfs_xgboost(   .model_type = \"xgboost\",   .recipe_list,   .trees = 15L,   .min_n = 1L,   .tree_depth = 6L,   .learn_rate = 0.3,   .loss_reduction = 0,   .sample_size = 1,   .stop_iter = Inf )"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":".model_type set engine. uses parsnip::boost_tree hood can take one following: \"xgboost\" .recipe_list must supply list recipes. list(rec_1, rec_2, ...) .trees number trees (type: integer, default: 15L) .min_n Minimal Node Size (type: integer, default: 1L) .tree_depth Tree Depth (type: integer, default: 6L) .learn_rate Learning Rate (type: double, default: 0.3) .loss_reduction Minimum Loss Reduction (type: double, default: 0.0) .sample_size Proportion Observations Sampled (type: double, default: 1.0) .stop_iter number ierations Stopping (type: integer, default: Inf)","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"Returns workflowsets object.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"function expects take recipes want use modeling process. automated workflow process. sensible defaults set model specification, choose can set good understanding . mode set \"regression\". uses option set_engine(\"xgboost\") therefore .model_type needed. parameter kept possible future change, keeps framework functions written. parsnip::boost_tree() xgboost::xgb.train() creates series decision trees forming ensemble. tree depends results previous trees. trees ensemble combined produce final prediction.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/ts_wfs_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto XGBoost (XGBoost) Workflowset Function — ts_wfs_xgboost","text":"","code":"suppressPackageStartupMessages(library(modeltime)) suppressPackageStartupMessages(library(timetk)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rsample))  data <- AirPassengers %>%   ts_to_tbl() %>%   select(-index)  splits <- time_series_split(    data   , date_col   , assess = 12   , skip = 3   , cumulative = TRUE )  rec_objs <- ts_auto_recipe(  .data = training(splits)  , .date_col = date_col  , .pred_col = value )  wf_sets <- ts_wfs_xgboost(\"xgboost\", rec_objs) wf_sets #> # A workflow set/tibble: 4 × 4 #>   wflow_id                        info             option    result     #>   <chr>                           <list>           <list>    <list>     #> 1 rec_base_boost_tree             <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec_date_boost_tree             <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec_date_fourier_boost_tree     <tibble [1 × 4]> <opts[0]> <list [0]> #> 4 rec_date_fourier_nzv_boost_tree <tibble [1 × 4]> <opts[0]> <list [0]>"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"function attempts make non-stationary time series stationary applying differencing logarithmic transformation. iteratively increases differencing order stationarity achieved informs user transformation possible.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"","code":"util_difflog_ts(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"time series already stationary differencing logarithmic transformation successful,","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"function calculates frequency input time series using stats::frequency function checks minimum value time series greater 0. applies differencing logarithmic transformation incrementally Augmented Dickey-Fuller test indicates stationarity (p-value < 0.05) differencing order reaches frequency data. differencing logarithmic transformation successfully makes time series stationary, returns stationary time series related information list following elements: stationary_ts: stationary time series transformation. ndiffs: order differencing applied make stationary. adf_stats: Augmented Dickey-Fuller test statistics stationary time series. trans_type: Transformation type, \"diff_log\" case. ret: TRUE indicate successful transformation. data either minimum value less equal 0 requires differencing frequency allows, informs user suggests trying double differencing logarithmic transformation.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_difflog_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differencing with Log Transformation to Make Time Series Stationary — util_difflog_ts","text":"","code":"# Example 1: Using a time series dataset util_difflog_ts(AirPassengers) #> Differencing of order 1 made the time series stationary #> $stationary_ts #>               Jan          Feb          Mar          Apr          May #> 1949               0.052185753  0.112117298 -0.022989518 -0.064021859 #> 1950 -0.025752496  0.091349779  0.112477983 -0.043485112 -0.076961041 #> 1951  0.035091320  0.033901552  0.171148256 -0.088033349  0.053744276 #> 1952  0.029675768  0.051293294  0.069733338 -0.064193158  0.010989122 #> 1953  0.010256500  0.000000000  0.185717146 -0.004246291 -0.025863511 #> 1954  0.014815086 -0.081678031  0.223143551 -0.034635497  0.030371098 #> 1955  0.055215723 -0.037899273  0.136210205  0.007462721  0.003710579 #> 1956  0.021353124 -0.024956732  0.134884268 -0.012698583  0.015848192 #> 1957  0.028987537 -0.045462374  0.167820466 -0.022728251  0.019915310 #> 1958  0.011834458 -0.066894235  0.129592829 -0.039441732  0.042200354 #> 1959  0.066021101 -0.051293294  0.171542423 -0.024938948  0.058840500 #> 1960  0.029199155 -0.064378662  0.069163360  0.095527123  0.023580943 #>               Jun          Jul          Aug          Sep          Oct #> 1949  0.109484233  0.091937495  0.000000000 -0.084557388 -0.133531393 #> 1950  0.175632569  0.131852131  0.000000000 -0.073203404 -0.172245905 #> 1951  0.034289073  0.111521274  0.000000000 -0.078369067 -0.127339422 #> 1952  0.175008910  0.053584246  0.050858417 -0.146603474 -0.090060824 #> 1953  0.059339440  0.082887660  0.029852963 -0.137741925 -0.116202008 #> 1954  0.120627988  0.134477914 -0.030254408 -0.123344547 -0.123106058 #> 1955  0.154150680  0.144581229 -0.047829088 -0.106321592 -0.129875081 #> 1956  0.162204415  0.099191796 -0.019560526 -0.131769278 -0.148532688 #> 1957  0.172887525  0.097032092  0.004291852 -0.144914380 -0.152090098 #> 1958  0.180943197  0.121098097  0.028114301 -0.223143551 -0.118092489 #> 1959  0.116724274  0.149296301  0.019874186 -0.188422419 -0.128913869 #> 1960  0.125287761  0.150673346 -0.026060107 -0.176398538 -0.097083405 #>               Nov          Dec #> 1949 -0.134732594  0.126293725 #> 1950 -0.154150680  0.205443974 #> 1951 -0.103989714  0.128381167 #> 1952 -0.104778951  0.120363682 #> 1953 -0.158901283  0.110348057 #> 1954 -0.120516025  0.120516025 #> 1955 -0.145067965  0.159560973 #> 1956 -0.121466281  0.121466281 #> 1957 -0.129013003  0.096799383 #> 1958 -0.146750091  0.083510633 #> 1959 -0.117168974  0.112242855 #> 1960 -0.167251304  0.102278849 #>  #> $ndiffs #> [1] 1 #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -6.431315 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"diff_log\" #>  #> $ret #> [1] TRUE #>   # Example 2: Using a different time series dataset util_difflog_ts(BJsales)$ret #> Data either had a minimum value less than or equal to 0, or requires more than #> differencing than its frequency, trying double differencing log. #> [1] FALSE"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"function attempts make non-stationary time series stationary applying double differencing logarithmic transformation. iteratively increases differencing order stationarity achieved informs user transformation possible.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"","code":"util_doubledifflog_ts(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"time series already stationary double differencing logarithmic transformation successful, returns list described details section. transformation possible, informs user returns list ret set FALSE, indicating data stationarized.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"function calculates frequency input time series using stats::frequency function checks minimum value time series greater 0. applies double differencing logarithmic transformation incrementally Augmented Dickey-Fuller test indicates stationarity (p-value < 0.05) differencing order reaches frequency data. double differencing logarithmic transformation successfully makes time series stationary, returns stationary time series related information list following elements: stationary_ts: stationary time series transformation. ndiffs: order differencing applied make stationary. adf_stats: Augmented Dickey-Fuller test statistics stationary time series. trans_type: Transformation type, \"double_diff_log\" case. ret: TRUE indicate successful transformation. data either minimum value less equal 0 requires differencing frequency allows, informs user data stationarized.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doubledifflog_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double Differencing with Log Transformation to Make Time Series Stationary — util_doubledifflog_ts","text":"","code":"# Example 1: Using a time series dataset util_doubledifflog_ts(AirPassengers) #> Double Differencing of order 1 made the time series stationary #> $stationary_ts #>                Jan           Feb           Mar           Apr           May #> 1949                              0.0599315450 -0.1351068163 -0.0410323405 #> 1950 -0.1520462214  0.1171022747  0.0211282048 -0.1559630954 -0.0334759292 #> 1951 -0.1703526544 -0.0011897681  0.1372467045 -0.2591816057  0.1417776255 #> 1952 -0.0987053985  0.0216175262  0.0184400436 -0.1339264957  0.0751822792 #> 1953 -0.1101071821 -0.0102565002  0.1857171458 -0.1899634367 -0.0216172197 #> 1954 -0.0955329714 -0.0964931168  0.3048215823 -0.2577790480  0.0650065945 #> 1955 -0.0653003019 -0.0931149952  0.1741094774 -0.1287474836 -0.0037521418 #> 1956 -0.1382078481 -0.0463098564  0.1598409997 -0.1475828510  0.0285467756 #> 1957 -0.0924787442 -0.0744499110  0.2132828402 -0.1905487172  0.0426435608 #> 1958 -0.0849649257 -0.0787286925  0.1964870639 -0.1690345611  0.0816420865 #> 1959 -0.0174895318 -0.1173143955  0.2228357169 -0.1964813709  0.0837794484 #> 1960 -0.0830437006 -0.0935778165  0.1335420218  0.0263637631 -0.0719461805 #>                Jun           Jul           Aug           Sep           Oct #> 1949  0.1735060916 -0.0175467375 -0.0919374953 -0.0845573880 -0.0489740046 #> 1950  0.2525936098 -0.0437804375 -0.1318521311 -0.0732034040 -0.0990425008 #> 1951 -0.0194552025  0.0772322010 -0.1115212744 -0.0783690671 -0.0489703553 #> 1952  0.1640197884 -0.1214246638 -0.0027258289 -0.1974618914  0.0565426503 #> 1953  0.0852029504  0.0235482200 -0.0530346967 -0.1675948883  0.0215399175 #> 1954  0.0902568899  0.0138499264 -0.1647323226 -0.0930901390  0.0002384892 #> 1955  0.1504401004 -0.0095694510 -0.1924103165 -0.0584925044 -0.0235534893 #> 1956  0.1463562224 -0.0630126191 -0.1187523214 -0.1122087518 -0.0167634099 #> 1957  0.1529722149 -0.0758554330 -0.0927402395 -0.1492062318 -0.0071757183 #> 1958  0.1387428423 -0.0598451001 -0.0929837952 -0.2512578528  0.1050510618 #> 1959  0.0578837743  0.0325720271 -0.1294221152 -0.2082966053  0.0595085504 #> 1960  0.1017068187  0.0253855845 -0.1767334525 -0.1503384318  0.0793151339 #>                Nov           Dec #> 1949 -0.0012012013  0.2610263193 #> 1950  0.0180952250  0.3595946540 #> 1951  0.0233497089  0.2323708802 #> 1952 -0.0147181273  0.2251426335 #> 1953 -0.0426992749  0.2692493398 #> 1954  0.0025900336  0.2410320490 #> 1955 -0.0151928838  0.3046289378 #> 1956  0.0270664065  0.2429325621 #> 1957  0.0230770947  0.2258123867 #> 1958 -0.0286576015  0.2302607239 #> 1959  0.0117448950  0.2294118289 #> 1960 -0.0701678993  0.2695301530 #>  #> $ndiffs #> [1] 1 #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -7.858955 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"double_diff_log\" #>  #> $ret #> [1] TRUE #>   # Example 2: Using a different time series dataset util_doubledifflog_ts(BJsales)$ret #> Double Differencing of order 1 made the time series stationary #> [1] TRUE"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"function attempts make non-stationary time series stationary applying double differencing. iteratively increases differencing order stationarity achieved.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"","code":"util_doublediff_ts(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"time series already stationary double differencing successful, returns list described details section. additional differencing required, informs user returns list ret set FALSE, suggesting trying differencing natural logarithm.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"function calculates frequency input time series using stats::frequency function. applies double differencing incrementally Augmented Dickey-Fuller test indicates stationarity (p-value < 0.05) differencing order reaches frequency data. double differencing successfully makes time series stationary, returns stationary time series related information list following elements: stationary_ts: stationary time series double differencing. ndiffs: order differencing applied make stationary. adf_stats: Augmented Dickey-Fuller test statistics stationary time series. trans_type: Transformation type, \"double_diff\" case. ret: TRUE indicate successful transformation. data requires double differencing frequency allows, informs user suggests trying differencing natural logarithm instead.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_doublediff_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double Differencing to Make Time Series Stationary — util_doublediff_ts","text":"","code":"# Example 1: Using a time series dataset util_doublediff_ts(AirPassengers) #> Double Differencing of order 1 made the time series stationary #> $stationary_ts #>       Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec #> 1949              8  -17   -5   22   -1  -13  -12   -5    2   29 #> 1950  -17   14    4  -21   -4   34   -3  -21  -12  -13    6   45 #> 1951  -21    0   23  -43   24   -3   15  -21  -15   -7    6   36 #> 1952  -15    4    4  -25   14   33  -23    0  -45   15   -1   41 #> 1953  -20   -2   40  -41   -5   20    7  -13  -43    9   -5   52 #> 1954  -18  -19   63  -55   15   23    8  -47  -25    4    4   52 #> 1955  -13  -22   43  -32   -1   44    4  -66  -18   -3    1   78 #> 1956  -35  -13   47  -44    9   51  -17  -47  -42    1   14   70 #> 1957  -26  -23   69  -63   15   60  -24  -41  -65    6   15   73 #> 1958  -27  -26   66  -58   29   57  -16  -42 -115   56   -4   76 #> 1959   -4  -41   82  -74   34   28   24  -65 -107   40   11   88 #> 1960  -31  -38   54   14  -31   52   24 -103  -82   51  -24  113 #>  #> $ndiffs #> [1] 1 #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -8.051569 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"double_diff\" #>  #> $ret #> [1] TRUE #>   # Example 2: Using a different time series dataset util_doublediff_ts(BJsales)$ret #> Double Differencing of order 1 made the time series stationary #> [1] TRUE"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"function attempts make non-stationary time series stationary applying logarithmic transformation. successful, returns stationary time series. transformation fails, informs user.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"","code":"util_log_ts(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"time series already stationary logarithmic transformation successful, returns list described details section. transformation fails, returns list ret set FALSE.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"function checks minimum value input time series greater equal zero. yes, performs Augmented Dickey-Fuller test logarithm time series. p-value test less 0.05, concludes logarithmic transformation made time series stationary returns result list following elements: stationary_ts: stationary time series logarithmic transformation. ndiffs: applicable case, marked NA. adf_stats: Augmented Dickey-Fuller test statistics stationary time series. trans_type: Transformation type, \"log\" case. ret: TRUE indicate successful transformation. minimum value time series less equal 0 logarithmic transformation make time series stationary, informs user returns list ret set FALSE.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_log_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logarithmic Transformation to Make Time Series Stationary — util_log_ts","text":"","code":"# Example 1: Using a time series dataset util_log_ts(AirPassengers) #> Logrithmic transformation made the time series stationary #> $stationary_ts #>           Jan      Feb      Mar      Apr      May      Jun      Jul      Aug #> 1949 4.718499 4.770685 4.882802 4.859812 4.795791 4.905275 4.997212 4.997212 #> 1950 4.744932 4.836282 4.948760 4.905275 4.828314 5.003946 5.135798 5.135798 #> 1951 4.976734 5.010635 5.181784 5.093750 5.147494 5.181784 5.293305 5.293305 #> 1952 5.141664 5.192957 5.262690 5.198497 5.209486 5.384495 5.438079 5.488938 #> 1953 5.278115 5.278115 5.463832 5.459586 5.433722 5.493061 5.575949 5.605802 #> 1954 5.318120 5.236442 5.459586 5.424950 5.455321 5.575949 5.710427 5.680173 #> 1955 5.488938 5.451038 5.587249 5.594711 5.598422 5.752573 5.897154 5.849325 #> 1956 5.648974 5.624018 5.758902 5.746203 5.762051 5.924256 6.023448 6.003887 #> 1957 5.752573 5.707110 5.874931 5.852202 5.872118 6.045005 6.142037 6.146329 #> 1958 5.828946 5.762051 5.891644 5.852202 5.894403 6.075346 6.196444 6.224558 #> 1959 5.886104 5.834811 6.006353 5.981414 6.040255 6.156979 6.306275 6.326149 #> 1960 6.033086 5.968708 6.037871 6.133398 6.156979 6.282267 6.432940 6.406880 #>           Sep      Oct      Nov      Dec #> 1949 4.912655 4.779123 4.644391 4.770685 #> 1950 5.062595 4.890349 4.736198 4.941642 #> 1951 5.214936 5.087596 4.983607 5.111988 #> 1952 5.342334 5.252273 5.147494 5.267858 #> 1953 5.468060 5.351858 5.192957 5.303305 #> 1954 5.556828 5.433722 5.313206 5.433722 #> 1955 5.743003 5.613128 5.468060 5.627621 #> 1956 5.872118 5.723585 5.602119 5.723585 #> 1957 6.001415 5.849325 5.720312 5.817111 #> 1958 6.001415 5.883322 5.736572 5.820083 #> 1959 6.137727 6.008813 5.891644 6.003887 #> 1960 6.230481 6.133398 5.966147 6.068426 #>  #> $ndiffs #> [1] NA #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -6.421458 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"log\" #>  #> $ret #> [1] TRUE #>   # Example 2: Using a different time series dataset util_log_ts(BJsales.lead)$ret #> Logrithmic Transformation Failed. #> [1] FALSE"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"function attempts make non-stationary time series stationary applying single differencing. iteratively increases differencing order stationarity achieved.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"","code":"util_singlediff_ts(.time_series)"},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":".time_series time series object made stationary.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"time series already stationary single differencing successful, returns list described details section. additional differencing required, informs user returns list ret set FALSE.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"function calculates frequency input time series using stats::frequency function. applies single differencing incrementally Augmented Dickey-Fuller test indicates stationarity (p-value < 0.05) differencing order reaches frequency data. single differencing successfully makes time series stationary, returns stationary time series related information list following elements: stationary_ts: stationary time series differencing. ndiffs: order differencing applied make stationary. adf_stats: Augmented Dickey-Fuller test statistics stationary time series. trans_type: Transformation type, \"diff\" case. ret: TRUE indicate successful transformation. data requires single differencing frequency allows, informs user returns list ret set FALSE, indicating double differencing may needed.","code":""},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"Steven P. Sanderson II, MPH","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/reference/util_singlediff_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Differencing to Make Time Series Stationary — util_singlediff_ts","text":"","code":"# Example 1: Using a time series dataset util_singlediff_ts(AirPassengers) #> Differencing of order 1 made the time series stationary #> $stationary_ts #>       Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec #> 1949         6   14   -3   -8   14   13    0  -12  -17  -15   14 #> 1950   -3   11   15   -6  -10   24   21    0  -12  -25  -19   26 #> 1951    5    5   28  -15    9    6   21    0  -15  -22  -16   20 #> 1952    5    9   13  -12    2   35   12   12  -33  -18  -19   22 #> 1953    2    0   40   -1   -6   14   21    8  -35  -26  -31   21 #> 1954    3  -16   47   -8    7   30   38   -9  -34  -30  -26   26 #> 1955   13   -9   34    2    1   45   49  -17  -35  -38  -37   41 #> 1956    6   -7   40   -4    5   56   39   -8  -50  -49  -35   35 #> 1957    9  -14   55   -8    7   67   43    2  -63  -57  -42   31 #> 1958    4  -22   44  -14   15   72   56   14 -101  -45  -49   27 #> 1959   23  -18   64  -10   24   52   76   11  -96  -56  -45   43 #> 1960   12  -26   28   42   11   63   87  -16  -98  -47  -71   42 #>  #> $ndiffs #> [1] 1 #>  #> $adf_stats #> $adf_stats$test_stat #> [1] -7.017671 #>  #> $adf_stats$p_value #> [1] 0.01 #>  #>  #> $trans_type #> [1] \"diff\" #>  #> $ret #> [1] TRUE #>   # Example 2: Using a different time series dataset util_singlediff_ts(BJsales)$ret #> Data requires more single differencing than its frequency, trying double #> differencing #> [1] FALSE"},{"path":[]},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-030","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.3.0","title":"healthyR.ts 0.3.0","text":"CRAN release: 2023-11-15","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.3.0","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.3.0","text":"Fix #484 - Add function util_log_ts() Fix #485 - Add function util_singlediff_ts() Fix #486 - Add function util_doublediff_ts() Fix #487 - Add function util_difflog_ts() Fix #488 - Add function util_doubledifflog_ts()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.3.0","text":"Fix #480 - Add attributes output ts_growth_rate_vec() Fix #481 #483 - Update auto_stationarize() Fix #489 - Update ts_auto_arima() utilize parsnip engine auto_arima .tune set FALSE","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-0211","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.11","title":"healthyR.ts 0.2.11","text":"CRAN release: 2023-10-14","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-11","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.11","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-11","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.11","text":"Fix #459 - Add function ts_growth_rate_vec() Fix #463 - Add function ts_adf_test() Fix #417 - Add function auto_stationarize() Fix #460 - Add function ts_growth_rate_augment()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-11","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.11","text":"Fix #456 Fix boilerplate examples set .true param FALSE","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-0210","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.10","title":"healthyR.ts 0.2.10","text":"CRAN release: 2023-08-22","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-10","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.10","text":"Fix #439 fix-example-rsample 6366226ec2dccdc296037e8e7efadf89994e6a1d @hfrick","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-10","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.10","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-10","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.10","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-029","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.9","title":"healthyR.ts 0.2.9","text":"CRAN release: 2023-06-24","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-9","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.9","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-9","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.9","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-9","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.9","text":"Fix #436 - Modify boilerplate fitting functions use tune::show_best(n = 1) instead Inf using dplyr::slice(1)","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-028","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.8","title":"healthyR.ts 0.2.8","text":"CRAN release: 2023-04-14","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-8","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.8","text":"Fix #424 - Require R >= 3.3","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-8","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.8","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-8","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.8","text":"Fix #425 - Fix ts_ma_plt() errors stemming deprecations. Also fixed examples boilerplate functions.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-027","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.7","title":"healthyR.ts 0.2.7","text":"CRAN release: 2023-01-28","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-7","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.7","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-7","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.7","text":"Fix #397 - Add function ts_geometric_brownian_motion() Fix #402 - Add function ts_brownian_motion_augment() Fix #403 - Add function ts_geometric_brownian_motion_augment() Fix #404 - Add function ts_brownian_motion_plot()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-7","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.7","text":"Fix #395 - Update optimize ts_brownian_motion() 49x speedup way vectorization. Fix #412 - Update brownian motion functions attribute .motion_type Fix #411 - Drop invisible return ts_vva_plot()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-026","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.6","title":"healthyR.ts 0.2.6","text":"CRAN release: 2023-01-06","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-6","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.6","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.6","text":"Fix #389 - Add function ts_brownian_motion()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-6","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.6","text":"Fix #387 - Fix documentation ts_scedacity_scatter_plot()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-025","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.5","title":"healthyR.ts 0.2.5","text":"CRAN release: 2022-11-16","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-5","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.5","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.5","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-5","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.5","text":"Fix #380 - Fix ts_lag_correlation() fix bug correlation matrix calculation columns may come numeric part original value ’s lags.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-024","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.4","title":"healthyR.ts 0.2.4","text":"CRAN release: 2022-11-10","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-4","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.4","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.4","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-4","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.4","text":"Fix #368 - Pull request @EmilHvitfeldt use recipes::check_type() recipe functions. Fix #370 - Update ts_model_spec_tune_template() set regression argument parsnip::set_mode() fires failure ts_model_auto_tune() running newer versions parsnip","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-023","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.3","title":"healthyR.ts 0.2.3","text":"CRAN release: 2022-10-03","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-3","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.3","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.3","text":"Fix #357 - Add function ts_wfs_xgboost()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-3","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.3","text":"Fix #358 - Update ts_calendar_heatmap_plot() Change weekdays Monthls abbreviated labels.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-022","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.2","title":"healthyR.ts 0.2.2","text":"CRAN release: 2022-08-07","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.2","text":"Fix 345 - Fix ts_sma_plot() change API function. now requires data.frame/tibble passed .data parameter, also now requires input date column value column. also now longer returns invisible. also fix sliding calculation appropriately use given value column.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.2","text":"Fix #342 - Add function ts_extract_auto_fitted_workflow() pull fitted workflow Boilerplate functions.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.2","text":"Fix #343 - Add attributes output list boilerplate functions. Fix #347 - Fix ts_auto_lm() dropping step_rm() step_corr() prevent calibrate_and_plot() working due modeltime_calibration() failing. Also dropped unused parameters function documentation. Fix #349 - Fix ts_lag_correlation() select statement.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-021","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.1","title":"healthyR.ts 0.2.1","text":"CRAN release: 2022-07-19","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.1","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.1","text":"Fix #306 - Add function ts_time_event_analysis_tbl() Fix #315 - Add function ts_lag_correlation() Fix #327 - Add date helpers Fix #326 - Add functions ci_hi() ci_lo() Fix #325 - Add function ts_event_analysis_plot()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.1","text":"Fix #333 - Update ts_model_auto_tune() ts_model_spec_tune_template() accept svm_poly svm_rbf. helps allowing users auto tune models create ts_wfs_svm_poly() ts_wfs_svm_rbf() functions respectively. Also added “model_spec_class” output ts_model_auto_tune() function.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-020","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.2.0","title":"healthyR.ts 0.2.0","text":"CRAN release: 2022-06-09","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.2.0","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.2.0","text":"Fix #277 - Add function ts_auto_arima() boiler plate function. Fix #284 - Add functions color_blind() ts_scale_fill_colorblind() ts_scale_color_colorblind() Fix #278 - Add function ts_auto_smooth_es() Fix #279 - Add function ts_auto_theta() Fix #280 - Add function ts_auto_lm() Fix #281 - Add function ts_auto_svm_poly() Fix #282 - Add function ts_auto_svm_rbf()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.2.0","text":"Fix #275 - Correct ts_auto_arima_xgboots() .tune FALSE. Fix #286 - Change boilerplate recipe keep date column change numeric rather using step_rm() instead use step_mutate(.numeric()) Fix #288 - Update tune template helper function smooth_es use tune::tune() Fix #291 - Move kmeans functions using healthyR healthyR.ai anticipation dropping kmeans functionality healthyR","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-019","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.9","title":"healthyR.ts 0.1.9","text":"CRAN release: 2022-04-26","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-9","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.9","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-9","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.9","text":"Fix #223 - Add function ts_arima_simulator() Fix #227 - Add function ts_feature_cluster() Fix #228 - Add function ts_feature_cluster_plot() Fix #241 - Add function ts_auto_glmnet() Fix #243 - Add function ts_auto_xgboost() Fix #244 - Add function ts_auto_arima_xgboost() Fix #245 - Add function ts_auto_mars() Fix #246 - Add function ts_auto_exp_smoothing() Fix #247 - Add function ts_auto_croston() Fix #248 - Add function ts_auto_nnetar() Fix #250 - Add function ts_auto_prophet_reg() Fix #251 - Add function ts_auto_prophet_boost()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-9","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.9","text":"Fix #212 - Update recipes use new [recipes::print_step()] method. Fix #229 - Change plots ggplot2::theme_minimal() Fix #242 - Add hardhat DESCRIPTION since functionality like extracting dials parameters taken dials moved hardhat.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-018","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.8","title":"healthyR.ts 0.1.8","text":"CRAN release: 2022-02-25","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-8","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.8","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-8","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.8","text":"Fix #201 - Add Fitted ts Fitted tibble data output. Fix #202 - Add Residuals ts Residuals tibble data output. Fix #204 - Add Arima() models xreg ts_forecast_simulator()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-8","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.8","text":"Fix #199 - Update model_extraction_helper() utilize forecast:::arima.string() hood Arima arima auto.arima models produced forecast package. Fix #195 - Drop need crayon, cli, rstudioapi since make welcome message can done regular print() method. Fix #213 - Update navigation bar.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-017","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.7","title":"healthyR.ts 0.1.7","text":"CRAN release: 2021-12-11","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.7","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-7","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.7","text":"Fix #181 - Add function ts_qq_plot() Fix #180 - Add function ts_scedacity_scatter_plot() Fix #179 - Add function ts_model_rank_tbl()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvments-0-1-7","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvments","title":"healthyR.ts 0.1.7","text":"Fix #178 - Extend model_extraction_helper() grab workflow model_spec model_fit objects.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-016","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.6","title":"healthyR.ts 0.1.6","text":"CRAN release: 2021-12-04","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.6","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.6","text":"Fix #157 - Add function ts_vva_plot() Fix #149 - Add function ts_model_compare() Fix #156 - Add functions: ts_acceleration_vec() ts_acceleration_augment() step_ts_acceleration() Fix #155 - Add functions: ts_velocity_vec() ts_velocity_augment() step_ts_velocity()","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-6","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.6","text":"Fix #159 - Add parameter .date_col ts_sma_plot() tibble passed appropriate column passed ggplot object. Fix #164 - Update model_extraction_helper() function extract workflow fit models.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-015","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.5","title":"healthyR.ts 0.1.5","text":"CRAN release: 2021-11-10","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.5","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.5","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-5","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.5","text":"Fix #143 - Drop mtry = tune::tune() ts_model_spec_tune_template causes issues downstream.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-014","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.4","title":"healthyR.ts 0.1.4","text":"CRAN release: 2021-10-31","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.4","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.4","text":"Fix #90 - Add tidy_fft() function Fix #92 - Add ts_info_tbl() function Fix #96 - Add ts_sma_plot() function Fix #98 - Add ts_to_tbl() function Fix #103 - Add ts_model_auto_tune() function Fix #104 - Add ts_model_spec_tune_template() function Fix #114 - Add ts_wfs_auto_arima() function Fix #117 - Add ts_wfs_arima_boost() function Fix #122 - Add ts_wfs_ets_reg() function Fix #125 - Add ts_wfs_nnetar_reg() function Fix #128 - Add ts_wfs_prophet_reg() function","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-4","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.4","text":"Fix #105 - Fix ts_auto_recipe() bug forced change column names output. fixed column names supplied now recipe terms.","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-013","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.3","title":"healthyR.ts 0.1.3","text":"CRAN release: 2021-08-23","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.3","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.3","text":"Fix #36 - Add ts_forecast_simulator() function Fix #45 - Add calibrate_and_plot() helper function Fix #46 - Add ts_wfs_lin_reg(), ts_wfs_mars(), ts_wfs_svm_poly(), ts_wfs_svm_rbf() Fix #47 - Add model_extraction_helper() helper function Fix #51 - Add ts_ma_plot() plotting function Fix #59 - Add ts_calendar_heatmap_plot() plotting function Fix #65 - Add ts_splits_plot() plotting function","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvements-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"healthyR.ts 0.1.3","text":"Fix #40 - Add ggplot object Fix #54 - Drop xts::legend add .align = “right” slidify_vec function Fix #62 - Fix ggplot title Arima models","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-012","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.2","title":"healthyR.ts 0.1.2","text":"CRAN release: 2021-06-25","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"breaking-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"healthyR.ts 0.1.2","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"healthyR.ts 0.1.2","text":"Fix #16 - Add ts_auto_recipe() function","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"minor-fixes-and-improvments-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvments","title":"healthyR.ts 0.1.2","text":"None","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-011","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.1","title":"healthyR.ts 0.1.1","text":"CRAN release: 2021-02-09 update DESCRIPTION file minor cleanups GitHub release: https://github.com/spsanderson/healthyR.ts/releases/tag/v0.1.1","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-010","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.1.0","title":"healthyR.ts 0.1.0","text":"CRAN release: 2021-01-22 Added functions ts_qc_run_chart ts_compare_data","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-0009001","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.0.0.9001","title":"healthyR.ts 0.0.0.9001","text":"Added fuctions ts_random_walk ts_random_walk_ggplot_layers","code":""},{"path":"https://www.spsanderson.com/healthyR.ts/news/index.html","id":"healthyrts-0009000","dir":"Changelog","previous_headings":"","what":"healthyR.ts 0.0.0.9000","title":"healthyR.ts 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
